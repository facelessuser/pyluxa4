{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Luxafor","text":"<p>Warning</p> <p>This library has only been tested on the Luxafor Flag. It may or may not work on other devices.</p> <p><code>pyluxa4</code> is a Python library for controlling Luxafor devices and is cross platform. It runs on Windows, macOS, and Linux. You can set colors, strobe them, fade them, apply wave effects, and even run its built-in patterns. All of this is done by running a small server that is accessed locally on port 5000 (the port can be changed).</p> <p>Once the server is running, you can issue commands from the CLI tool, which in turns communicates with the server using a REST API. Since the server uses a REST API, you could easily write scripts in other languages to control the device once running.</p> <p>If desired, you can import the <code>pyluxa4.usb</code> library in a script and control the device directly without running a server. Or you could import <code>pyluxa4.client</code> and write your own application that uses the REST API to control the device through the server.</p> <p>There are already various other libraries out that control the Luxafor devices. Some worked better than others, and while many did exactly as advertised, none really did all that I was looking for. <code>pyluxa4</code> is a simple solution that works on all operating systems, is easily controlled from anywhere on a local network, provides a scheduler so you can setup lights to run at specific times, and an interface for setting timers.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#list","title":"List","text":"<p>The <code>list</code> command lists all the available Luxafor devices connected to the machine. It provides the index of the device in the list and the path at which it is found. Either the index or path can be used in the <code>serve</code> command to specify which device to connect to, the path will always take precedence.</p> <pre><code>$ pyluxa4 list --help\nusage: pyluxa4 list [-h]\n\nList available Luxafor devices\n\noptional arguments:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"commands/#serve","title":"Serve","text":"<p>The <code>serve</code> command connects with your device and starts a server. By default, the first Luxafor device that is found is the one that the server will connect to, but you can specify a specific device by either using <code>--device-path</code> or <code>--device-index</code>. <code>--device-path</code> take precedence over <code>--device-index</code>.</p> <p>If desired, you can schedule events by specifying a schedule file via the <code>--schedule</code> option. See Scheduler for more information.</p> <p>You can restrict the incoming requests by using a token via the <code>--token</code> option, and only requests that provide the token will be accepted. <code>--token</code> should really only be used over SSL.</p> <p>You can also ensure the server only takes HTTPS requests by using <code>--ssl-key</code> and <code>--ssl-cert</code>. Support is limited. <code>pyluxa4</code> is only really intended to be used on a local network, and probably with only self signed certificates. Commands sent via the client should use the <code>--secure &lt;option&gt;</code> option to either send requests with verification (<code>1</code>), requests with no verification (<code>0</code>), or to specify a certificate to validate against.</p> <p>Linux</p> <p>You may need to run the server as <code>sudo</code> in order to connect to the Luxafor device. If you get errors about not being able to connect, try <code>sudo</code>.</p> <pre><code>$ pyluxa4 serve --help\nusage: pyluxa4 serve [-h] [--schedule SCHEDULE] [--device-path DEVICE_PATH] [--device-index DEVICE_INDEX] [--hidapi HIDAPI] [--host HOST]\n                     [--port PORT] [--ssl-key SSL_KEY] [--ssl-cert SSL_CERT] [--token TOKEN]\n\nRun server.\n\noptions:\n  -h, --help            show this help message and exit\n  --schedule SCHEDULE   JSON schedule file.\n  --device-path DEVICE_PATH\n                        Luxafor device path.\n  --device-index DEVICE_INDEX\n                        Luxafor device index.\n  --hidapi HIDAPI       Explicit, absolute path to where the hidapi library can be found.\n  --host HOST           Host\n  --port PORT           Port.\n  --ssl-key SSL_KEY     SSL key file (for https://).\n  --ssl-cert SSL_CERT   SSL cert file (for https://).\n  --token TOKEN         Assign a token that must be used when sending commands.\n</code></pre>"},{"location":"commands/#color","title":"Color","text":"<p>The <code>color</code> command sets the color on the device. The color can be specified via CSS color syntax including, but not limited to, hex colors, RGB syntax, webcolor names, HSL, etc. Alpha will be ignored and out of gamut colors will be gamut mapped into sRGB.</p> <p>You can also use Luxafor's shorthand for the built-in color presets:</p> <ul> <li><code>R</code> (red)</li> <li><code>G</code> (green)</li> <li><code>B</code> (blue)</li> <li><code>C</code> (cyan)</li> <li><code>Y</code> (yellow)</li> <li><code>M</code> (magenta)</li> <li><code>W</code> (white)</li> <li><code>O</code> (off)</li> </ul> <p>If needed, you can also control each LED individually, or by the groups front and back. Though, the <code>--led</code> option will be ignored if you use Luxafor's built-in, color shorthand, as that is executed using a command that does not expose single LED resolution.</p> <pre><code>$ pyluxa4 color --help\nusage: pyluxa4 color [-h] [--led LED] [--token TOKEN] [--host HOST]\n                     [--port PORT] [--secure SECURE] [--timeout TIMEOUT]\n                     color\n\nSet color\n\npositional arguments:\n  color              Color value.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --led LED          LED: 1-6, back, front, or all\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#fade","title":"Fade","text":"<p>The <code>fade</code> command will fade a color in, or in the case of <code>off</code> out. You can specify the speed of the fade which to increase how long it takes to fade the color. A low value will be faster than a big value.</p> <p>Color can be any value accepted by the <code>color</code> command except Luxafor shorthand for basic colors (e.g. <code>R</code>, <code>G</code>, <code>B</code>, etc.).</p> <p>If needed, you can also control each LED individually, or by the groups front and back.</p> <pre><code>$ pyluxa4 fade --help\nusage: pyluxa4 fade [-h] [--led LED] [--speed SPEED] [--token TOKEN]\n                    [--host HOST] [--port PORT] [--secure SECURE]\n                    [--timeout TIMEOUT]\n                    color\n\nFade to color\n\npositional arguments:\n  color              Color value.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --led LED          LED: 1-6, back, tab, or all\n  --speed SPEED      Speed of fade: 0-255\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#strobe","title":"Strobe","text":"<p>The <code>strobe</code> command will cause a color to blink on and off. You can control how fast it blinks and how many times.</p> <p>If needed, you can also control each LED individually, or by the groups front and back.</p> <p>Color can be any value accepted by the <code>color</code> command except Luxafor shorthand for basic colors (e.g. <code>R</code>, <code>G</code>, <code>B</code>, etc.).</p> <pre><code>$ pyluxa4 strobe --help\nusage: pyluxa4 strobe [-h] [--led LED] [--speed SPEED] [--repeat REPEAT]\n                      [--token TOKEN] [--host HOST] [--port PORT]\n                      [--secure SECURE] [--timeout TIMEOUT]\n                      color\n\nStrobe color\n\npositional arguments:\n  color              Color value.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --led LED          LED: 1-6, back, front, or all\n  --speed SPEED      Speed of strobe: 0-255\n  --repeat REPEAT    Number of times to repeat: 0-255\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#wave","title":"Wave","text":"<p>The <code>wave</code> command provides a way to have a color perform a wave effect. The type of wave, speed of the wave, and how many times it repeats can all be controlled. You can also use friendly names for 4 of the wave patterns instead of their numerical patterns:</p> Wave Alias 1 <code>short</code> 2 <code>long</code> 3 <code>overlapping-short</code> 4 <code>overlapping-long</code> 5 NA <p>You cannot control individual LEDs with the wave command as all the LEDs are needed to perform the wave effect.</p> <p>Color can be any value accepted by the <code>color</code> command except Luxafor shorthand for basic colors (e.g. <code>R</code>, <code>G</code>, <code>B</code>, etc.).</p> <pre><code>$ pyluxa4 wave --help\nusage: pyluxa4 wave [-h] [--wave WAVE] [--speed SPEED] [--repeat REPEAT]\n                    [--token TOKEN] [--host HOST] [--port PORT]\n                    [--secure SECURE] [--timeout TIMEOUT]\n                    color\n\nWave effect\n\npositional arguments:\n  color              Color value.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --wave WAVE        Wave configuration: 1-5\n  --speed SPEED      Speed of wave effect: 0-255\n  --repeat REPEAT    Number of times to repeat: 0-255\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#pattern","title":"Pattern","text":"<p>The <code>pattern</code> command initiates one of 8 built-in patterns on the Luxafor device. You can control which pattern is displayed along with how many times it repeats. You can also use friendly names for patterns instead of their numerical values:</p> Pattern Alias 1 <code>traffic-light</code> 2 <code>random1</code> 3 <code>random2</code> 4 <code>random3</code> 5 <code>police</code> 6 <code>random4</code> 7 <code>random5</code> 8 <code>rainbow</code> <p>You cannot control individual LEDs with the pattern command as all the LEDs are needed to perform the patterns.</p> <pre><code>$ pyluxa4 pattern --help\nusage: pyluxa4 pattern [-h] [--repeat REPEAT] [--token TOKEN] [--host HOST]\n                       [--port PORT] [--secure SECURE] [--timeout TIMEOUT]\n                       pattern\n\nDisplay pattern\n\npositional arguments:\n  pattern            Pattern value.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --repeat REPEAT    Number of times to repeat: 0-255\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#off","title":"Off","text":"<p>The <code>off</code> command turns off all lights on the Luxafor device.</p> <p>You cannot control which LED is turned off with this command. If you need per LED resolution, simply use <code>pyluxa4 color off --led &lt;led&gt;</code> to control individual LEDs.</p> <pre><code>$ pyluxa4 off --help\nusage: pyluxa4 off [-h] [--token TOKEN] [--host HOST] [--port PORT]\n                   [--secure SECURE] [--timeout TIMEOUT]\n\nTurn off\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#kill","title":"Kill","text":"<p>The <code>kill</code> command is used to kill an already running server.</p> <pre><code>$ pyluxa4 kill --help\nusage: pyluxa4 kill [-h] [--token TOKEN] [--host HOST] [--port PORT]\n                    [--secure SECURE] [--timeout TIMEOUT]\n\nKill server\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#scheduler","title":"Scheduler","text":"<p>The <code>scheduler</code> command takes a JSON file via <code>--schedule</code> with commands for either color, fade, strobe, wave, pattern, or off, and schedules them to be executed at the specified times on the specified days. Events are appended to previously scheduled events unless <code>--clear</code> is provided. If desired, you can run <code>--clear</code> without <code>--schedule</code> which will simply clear all events. <code>--clear</code> does not cancel timers, it only removes normal, scheduled events. To cancel timers, use <code>--cancel</code>.</p> <pre><code>$ pyluxa4 scheduler --help\nusage: pyluxa4 scheduler [-h] [--schedule SCHEDULE] [--clear] [--cancel]\n                         [--token TOKEN] [--host HOST] [--port PORT]\n                         [--secure SECURE] [--timeout TIMEOUT]\n\nSchedule events\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --schedule SCHEDULE  JSON schedule file.\n  --clear              Clear all scheduled events\n  --cancel             Cancel timers.\n  --token TOKEN        Send API token\n  --host HOST          Host\n  --port PORT          Port\n  --secure SECURE      Enable https requests: enable verification (1), disable\n                       verification(0), or specify a certificate.\n  --timeout TIMEOUT    Timeout\n</code></pre> <p>To learn more about using the scheduler see Scheduling Commands.</p>"},{"location":"commands/#timer","title":"Timer","text":"<p>The <code>timer</code> command provides a way to set off a timer that will execute a command based on a relative time.</p> <pre><code>$ pyluxa4 timer --help\nusage: pyluxa4 timer [-h] --times TIMES --cmd CMD [--led LED] [--color COLOR]\n                     [--pattern PATTERN] [--wave WAVE] [--speed SPEED]\n                     [--repeat REPEAT] [--cycle CYCLE] [--start START]\n                     [--end END] [--token TOKEN] [--host HOST] [--port PORT]\n                     [--secure SECURE] [--timeout TIMEOUT]\n\nSetup timers\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --times TIMES      List of relative times (&lt;num hours&gt;:&lt;num minutes&gt;)\n                     separated by commas.\n  --cmd CMD          Timer event cmd: color, strobe, fade, wave, pattern, or\n                     off\n  --led LED          LED: 1-6, back, tab, or all\n  --color COLOR      Color of timer alerts.\n  --pattern PATTERN  Pattern of timer alerts.\n  --wave WAVE        Force a given wave effect instead of strobe.\n  --speed SPEED      Speed of strobe or wave: 0-255\n  --repeat REPEAT    Number of times to repeat: 0-255\n  --cycle CYCLE      Number of times to cycle through the timers.\n  --start START      Delay the timer to a specific time.\n  --end END          End timer at a specific time.\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre> <p>To learn more about setting timers, see Setting Timers.</p>"},{"location":"commands/#get","title":"Get","text":"<p>The <code>get</code> command allows you to retrieve information. Currently you can only retrieve the loaded <code>schedule</code> (scheduled non-timer events) or scheduled <code>timers</code>:</p> <pre><code>$ pyluxa4 get schedule\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.2/scheduler/schedule', 'schedule': [{'args': {'pattern': 'police', 'repeat': 3}, 'cmd': 'pattern', 'days': ['all'], 'times': '20:16'}, {'args': {'color': 'red', 'speed': 100}, 'cmd': 'fade', 'days': 'all', 'times': ['20:15', '20:17']}], 'status': 'success'}\n</code></pre> <pre><code>pyluxa4 get --help\nusage: pyluxa4 get [-h] [--token TOKEN] [--host HOST] [--port PORT]\n                   [--secure SECURE] [--timeout TIMEOUT]\n                   info\n\nGet information\n\npositional arguments:\n  info               Request information: schedule or timers\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --token TOKEN      Send API token\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"commands/#api","title":"API","text":"<p>The <code>api</code> command simply returns the API for the current running server.</p> <pre><code>$ pyluxa4 api --help\nusage: pyluxa4 api [-h] [--host HOST] [--port PORT] [--secure SECURE]\n                   [--timeout TIMEOUT]\n\nRequest version\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --host HOST        Host\n  --port PORT        Port\n  --secure SECURE    Enable https requests: enable verification (1), disable\n                     verification(0), or specify a certificate.\n  --timeout TIMEOUT  Timeout\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<p><code>pyluxa4</code> requires libusb/hidapi to be installed in order for the controller portion of the library to be functional. The hidapi path must be included in the systems appropriate environmental variable or the <code>--hidapi</code> option of the <code>serve</code> command must be specified with an absolute path to the library.</p> <ul> <li> <p>macOS: the easiest way is to just install with brew.</p> <pre><code>$ brew install hidapi\n</code></pre> <p>Update environment variables to include the path in <code>DYLD_LIBRARY_PATH</code> if not available. As an example:</p> <pre><code>DYLD_LIBRARY_PATH=\"${DYLD_LIBRARY_PATH}:/usr/local/Cellar/hidapi/0.14.0/lib\"\nexport DYLD_LIBRARY_PATH\n</code></pre> </li> <li> <p>Windows: simply download the pre-built binaries and make them available in your path. The     pre-built binaries include 32 bit and 64 bit architecture. Make sure to use the correct one for your system and     Python.</p> </li> <li> <p>Install via the provided package manager for your distro, or build from source. For Ubuntu:</p> <pre><code>$ sudo apt install libhidapi-hidraw0\n</code></pre> <p>or</p> <pre><code>$ apt install libhidapi-libusb0\n</code></pre> </li> </ul>"},{"location":"install/#install","title":"Install","text":"<p>Once the prerequisites are installed, you can simply use pip to install the library:</p> <pre><code>$ pip install pyluxa4\n</code></pre> <p>After that, <code>pyluxa4</code> should be available from the command line (assuming Python's bin/Script folder is in your system path).</p> <pre><code>$ pyluxa4 --version\npyluxa4 1.7\n</code></pre> <p>You can also run the module with:</p> <pre><code>$ python3 -m pyluxa4 --version\npyluxa4 1.7\n</code></pre>"},{"location":"rest/","title":"REST API","text":"<p> Under construction </p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#overview","title":"Overview","text":"<p><code>pyluxa4</code> is mainly designed to be used from command line. When installed, it provides a command line tool called <code>pyluxa4</code>. When installing the module, a tool will be added called <code>pyluxa4</code>. Assuming your Python installation's bin/Script folder is added to your system's path, you will be able to access it from the command line:</p> <pre><code>$ pyluxa4 --version\npyluxa4 1.5\n</code></pre> <p>You can also access it via:</p> <pre><code>$ python3 -m pyluxa4 --version\npyluxa4 1.5\n</code></pre>"},{"location":"usage/#starting-the-server","title":"Starting the Server","text":"<p>Generally, <code>pyluxa4</code> is designed to be used by running a server, and then executing commands:</p> <ol> <li> <p>Start the server:</p> <pre><code>$ pyluxa4 serve\n[2019-09-21 15:21:49] INFO: Starting Luxafor server...\n</code></pre> </li> <li> <p>Run a command:</p> <pre><code>$ pyluxa4 api\n{'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'}\n</code></pre> </li> </ol> <p>If you have multiple devices connected, and you want to specify a specific one, you can run the <code>list</code> command to see the connected devices. Devices are listed in the form <code>index&gt; path</code>.</p> <pre><code>$ pyluxa4 list\n0&gt; \\\\?\\hid#vid_04d8&amp;pid_f372#6&amp;38a95344&amp;1&amp;0000#{4d1e55b2-f16f-11cf-88cb-001111000030}\n</code></pre> <p>Then we can then specify from the command line which device to use when we start the server. Using the index, it would be:</p> <pre><code>$ pyluxa4 serve --device-index 0\n</code></pre> <p>Using the path, it would be:</p> <pre><code>$ pyluxa4 serve --device-path \"\\\\?\\hid#vid_04d8&amp;pid_f372#6&amp;38a95344&amp;1&amp;0000#{4d1e55b2-f16f-11cf-88cb-001111000030}\"\n</code></pre> <p>Normally, the serve command will find the <code>hidapi</code> library as long as its path is found in the systems appropriate environmental variable, but if it is not, or you'd like to explicitly specify the path to avoid any DLL hijacking, then you can specify the absolute path to the hidapi library with the <code>--hidapi</code>.</p> <pre><code>$ python3 -m pyluxa4 serve --hidapi /usr/local/Cellar/hidapi/0.14.0/lib/libhidapi.dylib\n</code></pre>"},{"location":"usage/#killing-a-server","title":"Killing a Server","text":"<p>If the server is running in a console, you can always press Ctrl\uff0bC, but if your server is running in the background, you can kill the server with the <code>kill</code> command.</p> <pre><code>$ pyluxa4 kill\n</code></pre>"},{"location":"usage/#sending-commands","title":"Sending Commands","text":"<p>Once the server is up and running, you can send a variety of commands to set the LEDs to a specific color, to fade colors in or out, to strobe colors, to apply a wave effect to a color, or to simply run one of the built-in patterns.</p> <p>More advanced commands are also available. The <code>scheduler</code> command can send JSON content to the server with a list of commands to run at different times. The <code>timer</code> command can initiate a timer to initiate a command after a set amount of time.</p> <p>To run the commands, simply call <code>pyluxa4</code> with the command, followed by the commands arguments:</p> <p>To set a color, simply specify the <code>color</code> command with the desired color:</p> <pre><code>$ pyluxa4 color red\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'}\n</code></pre> <p>There are a variety of commands, check out Commands to learn more.</p>"},{"location":"usage/#scheduling-commands","title":"Scheduling Commands","text":"<p><code>pyluxa4</code> provides a command scheduler that allows you to specify a number of commands to run at different times.</p> <p>For instance, if you wanted to automatically turn your light red at 3:00 PM for an hour, then turn it back green at 4:00 PM, we could construct a couple of scheduled events. Schedules are done as JSON files, the file should contain a list of events where each event is a hash of key value pairs that describes the event:</p> <pre><code>[\n  {\n    \"cmd\": \"color\",\n    \"days\": \"wkd\",\n    \"times\": [\"15:00\"],\n    \"args\": {\n      \"color\": \"red\"\n    }\n  },\n  {\n    \"cmd\": \"color\",\n    \"days\": \"wkd\",\n    \"times\": [\"16:00\"],\n    \"args\": {\n      \"color\": \"green\"\n    }\n  }\n]\n</code></pre> <p>Then we can send the command to the server:</p> <pre><code>$ pyluxa4 scheduler --schedule myschedule.json\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'}\n</code></pre> <p>If we want to clear existing scheduling events while sending our new schedule, simply add the <code>--clear</code> command.</p> <pre><code>$ pyluxa4 scheduler --schedule myschedule.json --clear\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'}\n</code></pre> <p>If desired, you can also just run <code>--clear</code> without a schedule remove all scheduled events.</p> <pre><code>$ pyluxa4 scheduler --clear\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'}\n</code></pre> <p>To get an output of loaded events in the schedule (timers not included), we can run:</p> <pre><code>$ pyluxa4 get schedule\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/schedule', 'schedule': [{'args': {'color': 'red'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['15:00']}, {'args': {'color': 'green'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['16:00']}], 'status': 'success'}\n</code></pre> Parameters Description <code>cmd</code> Name of the command to run <code>days</code> A list of days: <code>mon</code>, <code>tue</code>, <code>wed</code>, <code>thu</code>, <code>fri</code>, <code>sat</code>, or <code>sun</code>. You can also specify <code>wkd</code> for weekdays, <code>wke</code> for the weekend, and <code>all</code> for all days. <code>times</code> A list of times that the even will be run on. Times are specified as 24 hour time format. <code>args</code> Is a hash of key value pairs of arguments to pass the the specified command. <p>Sending Schedule on Server Start</p> <p>You can also load a schedule while starting the server via the <code>--schedule</code> parameter:</p> <pre><code>$ pyluxa4 serve --schedule myschedule.json\n[2019-09-22 14:05:10] INFO: Starting Luxafor server...\n</code></pre>"},{"location":"usage/#setting-timers","title":"Setting Timers","text":"<p><code>pyluxa4</code> allows for setting timers. Timers are essentially a special kind of scheduled event. One that ignores <code>days</code> and will destroy itself after the number of specified cycles has run to completion (unless it specified to run forever).</p> <p>Additionally, timers are unique as the <code>times</code> list does not contain specific times, but contains relative times in the form <code>&lt;number of hours&gt;:&lt;number of minutes&gt;</code>. For instance, if we wanted to have the timer go off in 3 hours and 30 minutes, we would specify the time as <code>3:30</code>. This does not represent <code>3:30 AM</code>, but 3 hours and 30 minutes from the time the timer was added.</p> <p>For instance, if we wanted to strobe a red light in an hour and 30 minutes, we could use the following command:</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 1:30\n</code></pre> <p>If we wanted to do it at ten minutes from now followed by another 5 minutes after that:</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5\n</code></pre> <p>We could even repeat the cycle to flash to iterate through the timers twice, essentially flashing the red light at 10 minutes, 5 minutes, 10 minutes, and 5 minutes</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5 --cycle 2\n</code></pre> <p>We could even do it continuously every 30 minutes by specifying the cycle as 0 (meaning forever):</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0\n</code></pre> <p>You can also delay when the times start by specifying a specific time to wait for before starting the timer. For instance, here we start flashing the light every 30 minutes starting at 9:00 AM:</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00\n</code></pre> <p>You could also terminate a timer after at a specific time, for example 5:00 PM:</p> <pre><code>$ pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00 --end 17:00\n</code></pre> <p>As mentioned, times are just a special kind of scheduled event, you can actually put them in a schedule file and they will be recognized. You must add <code>timer</code> with the number of times to cycle through the timers. You also must make times relative. The key <code>days</code> will be ignored in timers and can be omitted. You can also use two one or both timer specific keys (<code>start</code> and <code>end</code>) to specify a respective start and end time for the timers.</p> <p>For a simple example of a timer represented in a schedule file, consider a case where we'd like to turn off lights as soon as a schedule is loaded. We could specify a timer with a relative time of <code>0:0</code>, which means right away:</p> <pre><code>[\n  {\n      \"cmd\": \"off\",\n      \"timer\": 1,\n      \"times\": [\"0:0\"]\n  }\n]\n</code></pre> <p>You can clear all running timers by calling the <code>scheduler</code> command with the <code>--cancel</code> parameter:</p> <pre><code>$ pyluxa4 scheduler --cancel\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'}\n</code></pre> <p>To get an output of loaded timers, we can run:</p> <pre><code>$ pyluxa4 get timers\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/timers', 'schedule': [{'args': {}, 'cmd': 'off', 'days': 'all', 'end': None, 'start': None, 'timer': 1, 'times': ['0:10']}], 'status': 'success'}\n</code></pre>"},{"location":"usage/#enabling-https","title":"Enabling HTTPS","text":"<p><code>pyluxa4</code> is mainly meant to be used on a local network, so these instructions are from that perspective.</p> <p>In order to enable HTTPS, we need to have a certificate. In our local network case, using a simple self signed certificate is more than sufficient.</p> <p>To create a certificate, we will assume you have OpenSSL installed. If you are on Windows using Git Bash, it will likely be available in your Bash terminal. We use OpenSSL to generate a x509v3 certificate. You can create a simple configuration template like the one shown below which adds in the v3 parameters. Replace the IP with the one from your machine. We will call this file <code>cert.conf</code>.</p> <pre><code>[ req ]\ndefault_bits               = 4096\ndistinguished_name         = req_distinguished_name\n[ req_distinguished_name ]\ncountryName                = Country Name (2 letter code)\nstateOrProvinceName        = State or Province Name (full name)\nlocalityName               = Locality Name (eg, city)\norganizationName           = Organization Name (eg, company)\norganizationalUnitName     = Organizational Unit Name (eg, section)\ncommonName                 = Common Name (e.g. server FQDN or YOUR name)\nemailAddress               = Email Address\n[ v3_req  ]\nsubjectAltName             = @alt_names\n[alt_names]\nDNS.1                      = localhost\nIP.1                       = 127.0.0.1\nIP.2                       = 192.168.1.2\n</code></pre> <p>Afterwards, run the following command. Enter the information that you'd like:</p> <pre><code>$ openssl req -x509 -out pyluxa4.cer -newkey rsa:4096 -nodes -keyout private.key -extensions v3_req -days 3650 -config cert.conf\n</code></pre> <p>You should now have a certificate <code>pyluxa4.cer</code> and a private key file <code>private.key</code>.</p> <p>Afterwards, you we can use the <code>--ssl-cert</code> and <code>--ssl-key</code> parameters to enable HTTPS in the server:</p> <pre><code>$ pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key\n</code></pre> <p>Now the server will only accept commands over HTTPS.</p> <pre><code>$ pyluxa4 api\n{'status': 'fail', 'code': 0, 'error': 'Server does not appear to be running'}\n</code></pre> <p>To send commands with over HTTPS to the server, simply use the <code>--secure</code> parameter. If you send the command with <code>0</code>, it will ignore verifying the certificate:</p> <pre><code>$ pyluxa4 api --secure 0\nc:\\Python36\\lib\\site-packages\\urllib3\\connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n  InsecureRequestWarning)\n{'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'}\n</code></pre> <p>If you provide the certificate instead, it will verify the certificate:</p> <pre><code>$ pyluxa4 api --secure pyluxa4.cer\n{'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'}\n</code></pre>"},{"location":"usage/#token-authentication","title":"Token Authentication","text":"<p>In addition to using SSL for HTTPS, using token authentication can help make it more difficult for anyone to send commands to your Luxafor device. Tokens should really only be used with SSL.</p> <p>Simply specify your desired token using the the <code>--token</code> parameter when initiating the server:</p> <pre><code>$ pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key --token secret\n</code></pre> <p>Now the server will reject commands that require authentication if they are sent without the token.</p> <pre><code>$ pyluxa4 color red --secure pyluxa4.cer\n{'status': 'fail', 'code': 401, 'error': 'Unauthorized Access'}\n</code></pre> <p>But when we provide the token, the command passes:</p> <pre><code>$ pyluxa4 color red --secure pyluxa4.cer --token secret\n{'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'}\n</code></pre> <p>Commands that Don't Require Authentication</p> <p><code>api</code> is the one command that does not require authentication. It will accept commands with or without tokens.</p>"},{"location":"usb/","title":"USB API","text":""},{"location":"usb/#overview","title":"Overview","text":"<p>While <code>pyluxa4</code> provides a CLI interface for starting a server and commands that control a Luxafor device, you can also use <code>pyluxa4</code> to control the device directly through the USB without the server directly using. If you wish to control the device directly from your own Python scripts, simply import the <code>usb</code> library:</p> <pre><code>from pyluxa4 import usb\n</code></pre> <p>Then you can connect to a Luxafor device:</p> <pre><code>with usb.Luxafor(index=0) as luxafor:\n    luxafor.fade(\"red\", speed=10, wait=True)\n    luxafor.fade(\"green\", speed=10, wait=True)\n</code></pre> <p>You can also use it without <code>with</code>:</p> <pre><code>device = usb.Luxafor(index=0)\nluxafor.fade(\"red\", speed=10, wait=True)\nluxafor.fade(\"green\", speed=10, wait=True)\ndevice.close()\n</code></pre>"},{"location":"usb/#constants","title":"Constants","text":""},{"location":"usb/#leds","title":"LEDs","text":"Constant Alias Value LED_ALL <code>0xff</code> LED_FRONT <code>0x41</code> LED_BACK <code>0x42</code> LED_1 <code>1</code> LED_2 <code>2</code> LED_3 <code>3</code> LED_4 <code>4</code> LED_5 <code>5</code> LED_6 <code>6</code>"},{"location":"usb/#waves","title":"Waves","text":"Constant Alias Value WAVE_1 WAVE_SHORT <code>1</code> WAVE_2 WAVE_LONG <code>2</code> WAVE_3 WAVE_OVERLAPPING_SHORT <code>3</code> WAVE_4 WAVE_OVERLAPPING_LONG <code>4</code> WAVE_5 <code>5</code>"},{"location":"usb/#patterns","title":"Patterns","text":"Constant Alias Value PATTERN_1 PATTERN_TRAFFIC_LIGHT <code>1</code> PATTERN_2 PATTERN_RANDOM1 <code>2</code> PATTERN_3 PATTERN_RANDOM2 <code>3</code> PATTERN_4 PATTERN_RANDOM3 <code>4</code> PATTERN_5 PATTERN_POLICE <code>5</code> PATTERN_6 PATTERN_RANDOM4 <code>6</code> PATTERN_7 PATTERN_RANDOM5 <code>7</code> PATTERN_8 PATTERN_RAINBOW <code>8</code>"},{"location":"usb/#enumerate_luxafor","title":"<code>enumerate_luxafor()</code>","text":"<p>Enumerate Luxafor devices returning a list of the available devices:</p> <pre><code>&gt;&gt;&gt; import pyluxa4.usb as usb\n&gt;&gt;&gt; usb.enumerate_luxafor()\n[{'path': b'\\\\\\\\?\\\\hid#vid_04d8&amp;pid_f372#6&amp;38a95344&amp;1&amp;0000#{4d1e55b2-f16f-11cf-88cb-001111000030}', 'vendor_id': 1240, 'product_id': 62322, 'serial_number': None, 'release_number': 256, 'manufacturer_string': 'Microchip Technology Inc.', 'product_string': 'LUXAFOR FLAG', 'usage_page': 65280, 'usage': 1, 'interface_number': -1}]\n</code></pre>"},{"location":"usb/#luxafor","title":"Luxafor()","text":"<pre><code>class Luxafor:\n    \"\"\"Class to control Luxafor device.\"\"\"\n\n    def __init__(self, index=0, path=None):\n</code></pre> <p>Luxafor is the class that connects to the Luxafor USB device.</p> Parameters Description <code>index</code> Index of the HID USB device as returned by <code>enumerate_luxafor()</code>. <code>path</code> The path of the HID USB device as returned by <code>enumerate_luxafor()</code>."},{"location":"usb/#luxaforclose","title":"Luxafor.close()","text":"<pre><code>def close(self):\n    \"\"\"Close Luxafor device.\"\"\"\n</code></pre> <p>Close the connection to the Luxafor device.</p>"},{"location":"usb/#luxaforoff","title":"Luxafor.off()","text":"<pre><code>def off(self):\n    \"\"\"Set all LEDs to off.\"\"\"\n</code></pre> <p>Sets all the LEDs of the Luxafor device off.</p>"},{"location":"usb/#luxaforbasic_color","title":"Luxafor.basic_color()","text":"<pre><code>def basic_color(self, color):\n    \"\"\"\n    Build basic color command.\n\n    ```\n    Byte 0: Report number (Luxafor flag only has 0)\n    Byte 1: Color: R, G, B, C, M, Y, W, O\n    Byte 2: NA\n    Byte 3: NA\n    Byte 4: NA\n    Byte 5: NA\n    Byte 6: NA\n    Byte 7: NA\n    Byte 8: NA\n    ```\n\n    \"\"\"\n</code></pre> <p>Using the built-in color codes, set all the LEDs to the color.</p> Parameters Description <code>color</code> A string with either the values <code>R</code> (red), <code>G</code> (green), <code>B</code> (blue), <code>C</code> (cyan), <code>M</code> (magenta), <code>Y</code> (yellow), or <code>O</code> (off)."},{"location":"usb/#luxaforcolor","title":"Luxafor.color()","text":"<pre><code>def color(self, color, *, led=LED_ALL):\n    \"\"\"\n    Build static color command.\n\n    ```\n    Byte 0: Report number: 0 (Luxafor flag only has 0)\n    Byte 1: Command Mode: 1\n    Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all)\n    Byte 3: Red channel: 0-255\n    Byte 4: Green channel: 0-255\n    Byte 5: Blue channel: 0-255\n    Byte 6: NA\n    Byte 7: NA\n    Byte 8: NA\n    ```\n\n    \"\"\"\n</code></pre> <p>Set LEDs to the specified colors. Each LED can be controlled individually. If a built-in color code is used, the command will revert to <code>basic_color</code> functionality, which means <code>led</code> specifics will be ignored and all LED will be set.</p> Parameters Description <code>color</code> Color is specified by a string with hex RGB color codes in the form of <code>#RRGGBB</code> or <code>#RGB</code>. You can also use any CSS webcolor name, such as <code>red</code>, <code>green</code>, etc. <code>off</code> is treated like <code>black</code> which turns all LEDs off. <code>led</code> Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with <code>0x41</code>, all the back LEDs with <code>0x42</code>, or all the LEDs with <code>0xff</code>. See LED constants."},{"location":"usb/#luxaforfade","title":"Luxafor.fade()","text":"<pre><code>def fade(self, color, *, led=LED_ALL, speed=1, wait=False):\n    \"\"\"\n    Build fade command.\n\n    ```\n    Byte 0: Report number: 0 (Luxafor flag only has 0)\n    Byte 1: Command Mode: 2\n    Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all)\n    Byte 3: Red channel: 0-255\n    Byte 4: Green channel: 0-255\n    Byte 5: Blue channel: 0-255\n    Byte 6: Fade speed: 0-255\n    Byte 7: NA\n    Byte 8: NA\n    ```\n\n    \"\"\"\n</code></pre> <p>Fade a color in (or out if the color is <code>off</code> or <code>black</code>). Each LED can be controlled individually via <code>led</code>. The duration/speed of the fade can also be controlled. If desired, you can wait for the command to complete as well. Commands that employ <code>repeat=0</code> will continue forever, so wait will not be considered for infinite loops.</p> Parameters Description <code>color</code> Color is specified by a string with hex RGB color codes in the form of <code>#RRGGBB</code> or <code>#RGB</code>. You can also use any CSS webcolor name, such as <code>red</code>, <code>green</code>, etc. <code>off</code> is treated like <code>black</code> which turns all LEDs off. <code>led</code> Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with <code>0x41</code>, all the back LEDs with <code>0x42</code>, or all the LEDs with <code>0xff</code>. See LED constants. <code>speed</code> Speed at which the color will be faded (0-255). Lower is generally faster. <code>repeat</code> How many times to repeat the fade effect (0-255). 0 will cause the effect to repeat forever. <code>wait</code> Wait for the command to complete. Wait will be ignored if <code>repeat</code> is 0."},{"location":"usb/#luxaforstrobe","title":"Luxafor.strobe()","text":"<pre><code>def strobe(self, color, *, led=LED_ALL, speed=0, repeat=0, wait=False):\n    \"\"\"\n    Build strobe command.\n\n    ```\n    Byte 0: Report number: 0 (Luxafor flag only has 0)\n    Byte 1: Command Mode: 3\n    Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all)\n    Byte 3: Red channel: 0-255\n    Byte 4: Green channel: 0-255\n    Byte 5: Blue channel: 0-255\n    Byte 6: Speed: 0-255\n    Byte 7: NA\n    Byte 8: Repeat: 0-255\n    ```\n\n    \"\"\"\n</code></pre> <p>Strobe the LEDs with the specified color. Each LED can be controlled individually via <code>led</code>. You can also control the speed and how many times the strobe repeats. If desired, you can wait for the command to complete as well. Commands that employ <code>repeat=0</code> will continue forever, so wait will not be considered for infinite loops.</p> Parameters Description <code>color</code> Color is specified by a string with hex RGB color codes in the form of <code>#RRGGBB</code> or <code>#RGB</code>. You can also use any CSS webcolor name, such as <code>red</code>, <code>green</code>, etc. <code>off</code> is treated like <code>black</code> which turns all LEDs off. <code>led</code> Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with <code>0x41</code>, all the back LEDs with <code>0x42</code>, or all the LEDs with <code>0xff</code>. See LED constants. <code>speed</code> Speed at which the color will strobe (0-255). Lower is generally faster. <code>repeat</code> How many times to repeat the strobe effect (0-255). 0 will cause the effect to repeat forever. <code>wait</code> Wait for the command to complete. Wait will be ignored if <code>repeat</code> is 0."},{"location":"usb/#luxaforwave","title":"Luxafor.wave()","text":"<pre><code>def wave(self, color, *, wave=WAVE_SHORT, speed=0, repeat=0, wait=False):\n    \"\"\"\n    Build wave command.\n\n    ```\n    Byte 0: Report number: 0 (Luxafor flag only has 0)\n    Byte 1: Command Mode: 4\n    Byte 2: Wave type: 1-5\n    Byte 3: Red channel: 0-255\n    Byte 4: Green channel: 0-255\n    Byte 5: Blue channel: 0-255\n    Byte 6: NA\n    Byte 7: Repeat: 0-255\n    Byte 8: Speed: 0-255\n    ```\n\n    \"\"\"\n</code></pre> <p>Apply a wave effect using the specified color across the LEDs. You can control the speed and how many times the wave is repeated. If desired, you can wait for the command to complete as well. Commands that employ <code>repeat=0</code> will continue forever, so wait will not be considered for infinite loops.</p> Parameters Description <code>color</code> Color is specified by a string with hex RGB color codes in the form of <code>#RRGGBB</code> or <code>#RGB</code>. You can also use any CSS webcolor name, such as <code>red</code>, <code>green</code>, etc. <code>off</code> is treated like <code>black</code> which turns all LEDs off. <code>wave</code> Specify the desired wave pattern. See the wave constants. <code>speed</code> Speed at which the color will apply the wave effect (0-255). Lower is generally faster. <code>repeat</code> How many times to repeat the wave effect (0-255). 0 will cause the effect to repeat forever. <code>wait</code> Wait for the command to complete. Wait will be ignored if <code>repeat</code> is 0."},{"location":"usb/#luxaforpattern","title":"Luxafor.pattern()","text":"<pre><code>def pattern(self, pattern, *, repeat=0, wait=False):\n    \"\"\"\n    Build pattern command.\n\n    ```\n    Byte 0: Report number: 0 (Luxafor flag only has 0)\n    Byte 1: Command Mode: 6\n    Byte 2: Pattern ID: 0-8\n    Byte 3: Repeat: 0-255\n    ```\n\n    \"\"\"\n</code></pre> <p>Initiate one of the built-in patterns in the Luxafor device. You can also control how man times the pattern repeats. If desired, you can wait for the command to complete as well. Commands that employ <code>repeat=0</code> will continue forever, so wait will not be considered for infinite loops.</p> Parameters Description <code>pattern</code> Pattern code (1-8). See the pattern constants. <code>repeat</code> How many times to repeat the pattern (0-255). 0 will cause the effect to repeat forever. <code>wait</code> Wait for the command to complete. Wait will be ignored if <code>repeat</code> is 0."},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#17","title":"1.7","text":"<ul> <li>NEW: Update supported Python versions to Python 3.8 - 3.12.</li> <li>NEW: Use <code>coloraide</code> to handle color parsing.</li> <li>NEW: Add <code>--hdiapi</code> option to the <code>serve</code> command to explicitly define an absolute path to the hidapi library.</li> <li>FIX: Vendor <code>hid</code> and provide fixes for loading the libraries on Windows with Python 3.8+.</li> </ul>"},{"location":"about/changelog/#16","title":"1.6","text":"<ul> <li>NEW: Deprecate the timer argument <code>--type</code> in favor of <code>--cmd</code> which corresponds to how it is stored in the     scheduler.</li> </ul>"},{"location":"about/changelog/#151","title":"1.5.1","text":"<ul> <li>FIX: Better scheduler algorithm. Handles lapse in time (computer sleeping), more efficient, etc.</li> </ul>"},{"location":"about/changelog/#15","title":"1.5","text":"<ul> <li>NEW: Add <code>timer</code> command.</li> <li>NEW: Add <code>--cancel</code> option to <code>scheduler</code> command that cancels timers in the scheduler. <code>--clear</code> will not     remove timers, only traditional scheduled events.</li> <li>FIX: Better day rollover logic.</li> <li>FIX: LED resolution from CLI.</li> </ul>"},{"location":"about/changelog/#14","title":"1.4","text":"<ul> <li>NEW: Schedule should not be sent as a file name, but as a JSON object.</li> </ul>"},{"location":"about/changelog/#13","title":"1.3","text":"<ul> <li>NEW: API for USB library now returns whether it passed or failed. This can indicate a disconnected device.</li> <li>FIX: A command may fail for various reasons, so don't remove a command from schedule just because it fails.</li> <li>FIX: Add logic to reconnect to a device if it appears the device was disconnected.</li> </ul>"},{"location":"about/changelog/#12","title":"1.2","text":"<ul> <li>NEW: <code>--wait</code> removed from CLI as the server should not get hung while waiting. <code>wait</code> is still available when     using <code>pyluxa4.usb</code> directly.</li> <li>NEW: Add new <code>scheduler</code> command that allows scheduling command events based on day and time and clearing     scheduled events.</li> <li>NEW: Add new <code>get</code> command which can be used to retrieve currently loaded schedules via <code>pyluxa4 get schedule</code>.</li> </ul>"},{"location":"about/changelog/#11","title":"1.1","text":"<ul> <li>NEW: Allow <code>traffic-light</code>, <code>police</code>, <code>rainbow</code>, and <code>random&lt;1 - 5&gt;</code> as valid values on CLI along with numerical     values.</li> <li>NEW: Allow <code>short</code>, <code>long</code>, <code>overlapping-short</code>, and <code>overlapping-long</code> as valid values on CLI along with     numerical values.</li> <li>NEW: Provide more constants with friendly names in common library.</li> <li>FIX: Wave pattern not being sent properly.</li> </ul>"},{"location":"about/changelog/#10","title":"1.0","text":"<ul> <li>NEW: Initial release</li> </ul>"},{"location":"about/contributing/","title":"Contributing &amp; Support","text":"<p>There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of!</p>"},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal.</p> <p> GitHub Sponsors  PayPal</p>"},{"location":"about/contributing/#bug-reports","title":"Bug Reports","text":"<ol> <li> <p>Please read the documentation and search the issue tracker to try and find the answer to your question   before posting an issue.</p> </li> <li> <p>When creating an issue on the repository, please provide as much info as possible:</p> <ul> <li>Version being used.</li> <li>Operating system.</li> <li>Version of Python.</li> <li>Errors in console.</li> <li>Detailed description of the problem.</li> <li>Examples for reproducing the error.  You can post pictures, but if specific text or code is required to     reproduce the issue, please provide the text in a plain text format for easy copy/paste.</li> </ul> <p>The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue.</p> </li> <li> <p>Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses   to respond to follow up questions will be marked as stale and closed.</p> </li> </ol>"},{"location":"about/contributing/#reviewing-code","title":"Reviewing Code","text":"<p>Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.</p>"},{"location":"about/contributing/#answer-questions-in-issues","title":"Answer Questions in Issues","text":"<p>Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for.  Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.</p>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are welcome, and a great way to help fix bugs and add new features.</p>"},{"location":"about/contributing/#documentation-improvements","title":"Documentation Improvements","text":"<p>A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.</p>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2019 - 2023 Isaac Muse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}