{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Luxafor \ue157 pyluxa4 is a Python library for controlling Luxafor devices and is cross platform. It runs on Windows, macOS, and Linux. You can set colors, strobe them, fade them, apply wave effects, and even run its built-in patterns. All of this is done by running a small server that is accessed locally on port 5000 (the port can be changed). Once the server is running, you can issue commands from the CLI tool, which in turns communicates with the server using a REST API. Since the server uses a REST API, you could easily write scripts in other languages to control the device once running. If desired, you can import the pyluxa4.usb library in a script and control the device directly without running a server. Or you could import pyluxa4.client and write your own application that uses the REST API to control the device through the server. There are already various other libraries out that control the Luxafor devices. Some worked better than others, and while many did exactly as advertised, none really did all that I was looking for. pyluxa4 is a simple solution that works on all operating systems, is easily controlled from anywhere on a local network, provides a scheduler so you can setup lights to run at specific times, and an interface for setting timers.","title":"Pyluxa4"},{"location":"#python-luxafor","text":"pyluxa4 is a Python library for controlling Luxafor devices and is cross platform. It runs on Windows, macOS, and Linux. You can set colors, strobe them, fade them, apply wave effects, and even run its built-in patterns. All of this is done by running a small server that is accessed locally on port 5000 (the port can be changed). Once the server is running, you can issue commands from the CLI tool, which in turns communicates with the server using a REST API. Since the server uses a REST API, you could easily write scripts in other languages to control the device once running. If desired, you can import the pyluxa4.usb library in a script and control the device directly without running a server. Or you could import pyluxa4.client and write your own application that uses the REST API to control the device through the server. There are already various other libraries out that control the Luxafor devices. Some worked better than others, and while many did exactly as advertised, none really did all that I was looking for. pyluxa4 is a simple solution that works on all operating systems, is easily controlled from anywhere on a local network, provides a scheduler so you can setup lights to run at specific times, and an interface for setting timers.","title":"Python Luxafor"},{"location":"commands/","text":"List \ue157 The list command lists all the available Luxafor devices connected to the machine. It provides the index of the device in the list and the path at which it is found. Either the index or path can be used in the serve command to specify which device to connect to, the path will always take precedence. $ pyluxa4 list --help usage: pyluxa4 list [-h] List available Luxafor devices optional arguments: -h, --help show this help message and exit Serve \ue157 The serve command connects with your device and starts a server. By default, the first Luxafor device that is found is the one that the server will connect to, but you can specify a specific device by either using --device-path or --device-index . --device-path take precedence over --device-index . If desired, you can schedule events by specifying a schedule file via the --schedule option. See Scheduler for more information. You can restrict the incoming requests by using a token via the --token option, and only requests that provide the token will be accepted. --token should really only be used over SSL. You can also ensure the server only takes HTTPS requests by using --ssl-key and --ssl-cert . Support is limited. pyluxa4 is only really intended to be used on a local network, and probably with only self signed certificates. Commands sent via the client should use the --secure <option> option to either send requests with verification ( 1 ), requests with no verification ( 0 ), or to specify a certificate to validate against. Linux You may need to run the server as sudo in order to connect to the Luxafor device. If you get errors about not being able to connect, try sudo . $ pyluxa4 serve --help usage: pyluxa4 serve [-h] [--schedule SCHEDULE] [--device-path DEVICE_PATH] [--device-index DEVICE_INDEX] [--host HOST] [--port PORT] [--ssl-key SSL_KEY] [--ssl-cert SSL_CERT] [--token TOKEN] Run server optional arguments: -h, --help show this help message and exit --schedule SCHEDULE JSON schedule file. --device-path DEVICE_PATH Luxafor device path --device-index DEVICE_INDEX Luxafor device index --host HOST Host --port PORT Port --ssl-key SSL_KEY SSL key file (for https://) --ssl-cert SSL_CERT SSL cert file (for https://) --token TOKEN Assign a token that must be used when sending commands Color \ue157 The color command sets the color on the device. The color is specified either in the form #RRGGBB , #RGB , or using webcolor names. off is also accepted and is an alias for black which turns off the lights. You can also use Luxafor's shorthand for the built-in color presets: R (red) G (green) B (blue) C (cyan) Y (yellow) M (magenta) W (white) O (off) If needed, you can also control each LED individually, or by the groups front and back. Though, the --led option will be ignored if you use Luxafor's built-in, color shorthand, as that is executed using a command that does not expose single LED resolution. $ pyluxa4 color --help usage: pyluxa4 color [-h] [--led LED] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Set color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, front, or all --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Fade \ue157 The fade command will fade a color in, or in the case of off out. You can specify the speed of the fade which to increase how long it takes to fade the color. A low value will be faster than a big value. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). If needed, you can also control each LED individually, or by the groups front and back. $ pyluxa4 fade --help usage: pyluxa4 fade [-h] [--led LED] [--speed SPEED] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Fade to color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, tab, or all --speed SPEED Speed of fade: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Strobe \ue157 The strobe command will cause a color to blink on and off. You can control how fast it blinks and how many times. If needed, you can also control each LED individually, or by the groups front and back. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). $ pyluxa4 strobe --help usage: pyluxa4 strobe [-h] [--led LED] [--speed SPEED] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Strobe color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, front, or all --speed SPEED Speed of strobe: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Wave \ue157 The wave command provides a way to have a color perform a wave effect. The type of wave, speed of the wave, and how many times it repeats can all be controlled. You can also use friendly names for 4 of the wave patterns instead of their numerical patterns: Wave Alias 1 short 2 long 3 overlapping-short 4 overlapping-long 5 NA You cannot control individual LEDs with the wave command as all the LEDs are needed to perform the wave effect. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). $ pyluxa4 wave --help usage: pyluxa4 wave [-h] [--wave WAVE] [--speed SPEED] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Wave effect positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --wave WAVE Wave configuration: 1-5 --speed SPEED Speed of wave effect: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Pattern \ue157 The pattern command initiates one of 8 built-in patterns on the Luxafor device. You can control which pattern is displayed along with how many times it repeats. You can also use friendly names for patterns instead of their numerical values: Pattern Alias 1 traffic-light 2 random1 3 random2 4 random3 5 police 6 random4 7 random5 8 rainbow You cannot control individual LEDs with the pattern command as all the LEDs are needed to perform the patterns. $ pyluxa4 pattern --help usage: pyluxa4 pattern [-h] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] pattern Display pattern positional arguments: pattern Pattern value. optional arguments: -h, --help show this help message and exit --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Off \ue157 The off command turns off all lights on the Luxafor device. You cannot control which LED is turned off with this command. If you need per LED resolution, simply use pyluxa4 color off --led <led> to control individual LEDs. $ pyluxa4 off --help usage: pyluxa4 off [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Turn off optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Kill \ue157 The kill command is used to kill an already running server. $ pyluxa4 kill --help usage: pyluxa4 kill [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Kill server optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout Scheduler \ue157 The scheduler command takes a JSON file via --schedule with commands for either color , fade , strobe , wave , pattern , or off , and schedules them to be executed at the specified times on the specified days. Events are appended to previously scheduled events unless --clear is provided. If desired, you can run --clear without --schedule which will simply clear all events. --clear does not cancel timers, it only removes normal, scheduled events. To cancel timers, use --cancel . $ pyluxa4 scheduler --help usage: pyluxa4 scheduler [-h] [--schedule SCHEDULE] [--clear] [--cancel] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Schedule events optional arguments: -h, --help show this help message and exit --schedule SCHEDULE JSON schedule file. --clear Clear all scheduled events --cancel Cancel timers. --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout To learn more about using the scheduler see Scheduling Commands . Timer \ue157 The timer command provides a way to set off a timer that will execute a command based on a relative time. $ pyluxa4 timer --help usage: pyluxa4 timer [-h] --times TIMES --cmd CMD [--led LED] [--color COLOR] [--pattern PATTERN] [--wave WAVE] [--speed SPEED] [--repeat REPEAT] [--cycle CYCLE] [--start START] [--end END] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Setup timers optional arguments: -h, --help show this help message and exit --times TIMES List of relative times (<num hours>:<num minutes>) separated by commas. --cmd CMD Timer event cmd: color, strobe, fade, wave, pattern, or off --led LED LED: 1-6, back, tab, or all --color COLOR Color of timer alerts. --pattern PATTERN Pattern of timer alerts. --wave WAVE Force a given wave effect instead of strobe. --speed SPEED Speed of strobe or wave: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --cycle CYCLE Number of times to cycle through the timers. --start START Delay the timer to a specific time. --end END End timer at a specific time. --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout To learn more about setting timers, see Setting Timers . Get \ue157 The get command allows you to retrieve information. Currently you can only retrieve the loaded schedule (scheduled non-timer events) or scheduled timers : $ pyluxa4 get schedule {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.2/scheduler/schedule', 'schedule': [{'args': {'pattern': 'police', 'repeat': 3}, 'cmd': 'pattern', 'days': ['all'], 'times': '20:16'}, {'args': {'color': 'red', 'speed': 100}, 'cmd': 'fade', 'days': 'all', 'times': ['20:15', '20:17']}], 'status': 'success'} pyluxa4 get --help usage: pyluxa4 get [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] info Get information positional arguments: info Request information: schedule or timers optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout API \ue157 The api command simply returns the API for the current running server. $ pyluxa4 api --help usage: pyluxa4 api [-h] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Request version optional arguments: -h, --help show this help message and exit --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Commands"},{"location":"commands/#list","text":"The list command lists all the available Luxafor devices connected to the machine. It provides the index of the device in the list and the path at which it is found. Either the index or path can be used in the serve command to specify which device to connect to, the path will always take precedence. $ pyluxa4 list --help usage: pyluxa4 list [-h] List available Luxafor devices optional arguments: -h, --help show this help message and exit","title":"List"},{"location":"commands/#serve","text":"The serve command connects with your device and starts a server. By default, the first Luxafor device that is found is the one that the server will connect to, but you can specify a specific device by either using --device-path or --device-index . --device-path take precedence over --device-index . If desired, you can schedule events by specifying a schedule file via the --schedule option. See Scheduler for more information. You can restrict the incoming requests by using a token via the --token option, and only requests that provide the token will be accepted. --token should really only be used over SSL. You can also ensure the server only takes HTTPS requests by using --ssl-key and --ssl-cert . Support is limited. pyluxa4 is only really intended to be used on a local network, and probably with only self signed certificates. Commands sent via the client should use the --secure <option> option to either send requests with verification ( 1 ), requests with no verification ( 0 ), or to specify a certificate to validate against. Linux You may need to run the server as sudo in order to connect to the Luxafor device. If you get errors about not being able to connect, try sudo . $ pyluxa4 serve --help usage: pyluxa4 serve [-h] [--schedule SCHEDULE] [--device-path DEVICE_PATH] [--device-index DEVICE_INDEX] [--host HOST] [--port PORT] [--ssl-key SSL_KEY] [--ssl-cert SSL_CERT] [--token TOKEN] Run server optional arguments: -h, --help show this help message and exit --schedule SCHEDULE JSON schedule file. --device-path DEVICE_PATH Luxafor device path --device-index DEVICE_INDEX Luxafor device index --host HOST Host --port PORT Port --ssl-key SSL_KEY SSL key file (for https://) --ssl-cert SSL_CERT SSL cert file (for https://) --token TOKEN Assign a token that must be used when sending commands","title":"Serve"},{"location":"commands/#color","text":"The color command sets the color on the device. The color is specified either in the form #RRGGBB , #RGB , or using webcolor names. off is also accepted and is an alias for black which turns off the lights. You can also use Luxafor's shorthand for the built-in color presets: R (red) G (green) B (blue) C (cyan) Y (yellow) M (magenta) W (white) O (off) If needed, you can also control each LED individually, or by the groups front and back. Though, the --led option will be ignored if you use Luxafor's built-in, color shorthand, as that is executed using a command that does not expose single LED resolution. $ pyluxa4 color --help usage: pyluxa4 color [-h] [--led LED] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Set color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, front, or all --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Color"},{"location":"commands/#fade","text":"The fade command will fade a color in, or in the case of off out. You can specify the speed of the fade which to increase how long it takes to fade the color. A low value will be faster than a big value. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). If needed, you can also control each LED individually, or by the groups front and back. $ pyluxa4 fade --help usage: pyluxa4 fade [-h] [--led LED] [--speed SPEED] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Fade to color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, tab, or all --speed SPEED Speed of fade: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Fade"},{"location":"commands/#strobe","text":"The strobe command will cause a color to blink on and off. You can control how fast it blinks and how many times. If needed, you can also control each LED individually, or by the groups front and back. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). $ pyluxa4 strobe --help usage: pyluxa4 strobe [-h] [--led LED] [--speed SPEED] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Strobe color positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --led LED LED: 1-6, back, front, or all --speed SPEED Speed of strobe: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Strobe"},{"location":"commands/#wave","text":"The wave command provides a way to have a color perform a wave effect. The type of wave, speed of the wave, and how many times it repeats can all be controlled. You can also use friendly names for 4 of the wave patterns instead of their numerical patterns: Wave Alias 1 short 2 long 3 overlapping-short 4 overlapping-long 5 NA You cannot control individual LEDs with the wave command as all the LEDs are needed to perform the wave effect. Color can be any value excepted by the color command except Luxafor shorthand for basic colors (e.g. R , G , B , etc.). $ pyluxa4 wave --help usage: pyluxa4 wave [-h] [--wave WAVE] [--speed SPEED] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] color Wave effect positional arguments: color Color value. optional arguments: -h, --help show this help message and exit --wave WAVE Wave configuration: 1-5 --speed SPEED Speed of wave effect: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Wave"},{"location":"commands/#pattern","text":"The pattern command initiates one of 8 built-in patterns on the Luxafor device. You can control which pattern is displayed along with how many times it repeats. You can also use friendly names for patterns instead of their numerical values: Pattern Alias 1 traffic-light 2 random1 3 random2 4 random3 5 police 6 random4 7 random5 8 rainbow You cannot control individual LEDs with the pattern command as all the LEDs are needed to perform the patterns. $ pyluxa4 pattern --help usage: pyluxa4 pattern [-h] [--repeat REPEAT] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] pattern Display pattern positional arguments: pattern Pattern value. optional arguments: -h, --help show this help message and exit --repeat REPEAT Number of times to repeat: 0-255 --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Pattern"},{"location":"commands/#off","text":"The off command turns off all lights on the Luxafor device. You cannot control which LED is turned off with this command. If you need per LED resolution, simply use pyluxa4 color off --led <led> to control individual LEDs. $ pyluxa4 off --help usage: pyluxa4 off [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Turn off optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Off"},{"location":"commands/#kill","text":"The kill command is used to kill an already running server. $ pyluxa4 kill --help usage: pyluxa4 kill [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Kill server optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Kill"},{"location":"commands/#scheduler","text":"The scheduler command takes a JSON file via --schedule with commands for either color , fade , strobe , wave , pattern , or off , and schedules them to be executed at the specified times on the specified days. Events are appended to previously scheduled events unless --clear is provided. If desired, you can run --clear without --schedule which will simply clear all events. --clear does not cancel timers, it only removes normal, scheduled events. To cancel timers, use --cancel . $ pyluxa4 scheduler --help usage: pyluxa4 scheduler [-h] [--schedule SCHEDULE] [--clear] [--cancel] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Schedule events optional arguments: -h, --help show this help message and exit --schedule SCHEDULE JSON schedule file. --clear Clear all scheduled events --cancel Cancel timers. --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout To learn more about using the scheduler see Scheduling Commands .","title":"Scheduler"},{"location":"commands/#timer","text":"The timer command provides a way to set off a timer that will execute a command based on a relative time. $ pyluxa4 timer --help usage: pyluxa4 timer [-h] --times TIMES --cmd CMD [--led LED] [--color COLOR] [--pattern PATTERN] [--wave WAVE] [--speed SPEED] [--repeat REPEAT] [--cycle CYCLE] [--start START] [--end END] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Setup timers optional arguments: -h, --help show this help message and exit --times TIMES List of relative times (<num hours>:<num minutes>) separated by commas. --cmd CMD Timer event cmd: color, strobe, fade, wave, pattern, or off --led LED LED: 1-6, back, tab, or all --color COLOR Color of timer alerts. --pattern PATTERN Pattern of timer alerts. --wave WAVE Force a given wave effect instead of strobe. --speed SPEED Speed of strobe or wave: 0-255 --repeat REPEAT Number of times to repeat: 0-255 --cycle CYCLE Number of times to cycle through the timers. --start START Delay the timer to a specific time. --end END End timer at a specific time. --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout To learn more about setting timers, see Setting Timers .","title":"Timer"},{"location":"commands/#get","text":"The get command allows you to retrieve information. Currently you can only retrieve the loaded schedule (scheduled non-timer events) or scheduled timers : $ pyluxa4 get schedule {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.2/scheduler/schedule', 'schedule': [{'args': {'pattern': 'police', 'repeat': 3}, 'cmd': 'pattern', 'days': ['all'], 'times': '20:16'}, {'args': {'color': 'red', 'speed': 100}, 'cmd': 'fade', 'days': 'all', 'times': ['20:15', '20:17']}], 'status': 'success'} pyluxa4 get --help usage: pyluxa4 get [-h] [--token TOKEN] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] info Get information positional arguments: info Request information: schedule or timers optional arguments: -h, --help show this help message and exit --token TOKEN Send API token --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"Get"},{"location":"commands/#api","text":"The api command simply returns the API for the current running server. $ pyluxa4 api --help usage: pyluxa4 api [-h] [--host HOST] [--port PORT] [--secure SECURE] [--timeout TIMEOUT] Request version optional arguments: -h, --help show this help message and exit --host HOST Host --port PORT Port --secure SECURE Enable https requests: enable verification (1), disable verification(0), or specify a certificate. --timeout TIMEOUT Timeout","title":"API"},{"location":"install/","text":"Installation \ue157 Prerequisites \ue157 pyluxa4 requires libusb/hidapi to be installed in order for the controller portion of the library to be functional. macOS: the easiest way is to just install with brew. brew install hidapi Windows: simply download the pre-built binaries and make them available in your path. Install via the provided package manager for your distro, or build from source. For Ubuntu: sudo apt install libhidapi-hidraw0 or apt install libhidapi-libusb0 Install \ue157 Once the prerequisites are installed, you can simply use pip to install the library: pip install pyluxa4 After that, pyluxa4 should be available from the command line (assuming Python's bin/Script folder is in your system path). $ pyluxa4 --version pyluxa4 1.5 You can also run the module with: $ python3 -m pyluxa4 --version pyluxa4 1.5","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#prerequisites","text":"pyluxa4 requires libusb/hidapi to be installed in order for the controller portion of the library to be functional. macOS: the easiest way is to just install with brew. brew install hidapi Windows: simply download the pre-built binaries and make them available in your path. Install via the provided package manager for your distro, or build from source. For Ubuntu: sudo apt install libhidapi-hidraw0 or apt install libhidapi-libusb0","title":"Prerequisites"},{"location":"install/#install","text":"Once the prerequisites are installed, you can simply use pip to install the library: pip install pyluxa4 After that, pyluxa4 should be available from the command line (assuming Python's bin/Script folder is in your system path). $ pyluxa4 --version pyluxa4 1.5 You can also run the module with: $ python3 -m pyluxa4 --version pyluxa4 1.5","title":"Install"},{"location":"rest/","text":"REST API \ue157 Under construction","title":"REST API"},{"location":"rest/#rest-api","text":"Under construction","title":"REST API"},{"location":"usage/","text":"Usage \ue157 Overview \ue157 pyluxa4 is mainly designed to be used from command line. When installed, it provides a command line tool called pyluxa4 . When installing the module, a tool will be added called pyluxa4 . Assuming your Python installation's bin/Script folder is added to your system's path, you will be able to access it from the command line: $ pyluxa4 --version pyluxa4 1.5 You can also access it via: $ python3 -m pyluxa4 --version pyluxa4 1.5 Starting the Server \ue157 Generally, pyluxa4 is designed to be used by running a server, and then executing commands: Start the server: $ pyluxa4 serve [2019-09-21 15:21:49] INFO: Starting Luxafor server... Run a command: $ pyluxa4 api {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'} If you have multiple devices connected, and you want to specify a specific one, you can run the list command to see the connected devices. Devices are listed in the form index> path . $ pyluxa4 list 0> \\\\?\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030} Then we can then specify from the command line which device to use when we start the server. Using the index, it would be: pyluxa4 serve --device-index 0 Using the path, it would be: pyluxa4 serve --device-path \"\\\\?\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}\" Killing a Server \ue157 If the server is running in a console, you can always press Ctrl \uff0b C , but if your server is running in the background, you can kill the server with the kill command. $ pyluxa4 kill Sending Commands \ue157 Once the server is up and running, you can send a variety of commands to set the LEDs to a specific color, to fade colors in or out, to strobe colors, to apply a wave effect to a color, or to simply run one of the built-in patterns. More advanced commands are also available. The scheduler command can send JSON content to the server with a list of commands to run at different times. The timer command can initiate a timer to initiate a command after a set amount of time. To run the commands, simply call pyluxa4 with the command, followed by the commands arguments: To set a color, simply specify the color command with the desired color: $ pyluxa4 color red {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'} There are a variety of commands, check out Commands to learn more. Scheduling Commands \ue157 pyluxa4 provides a command scheduler that allows you to specify a number of commands to run at different times. For instance, if you wanted to automatically turn your light red at 3:00 PM for an hour, then turn it back green at 4:00 PM, we could construct a couple of scheduled events. Schedules are done as JSON files, the file should contain a list of events where each event is a hash of key value pairs that describes the event: [ { \"cmd\" : \"color\" , \"days\" : \"wkd\" , \"times\" : [ \"15:00\" ], \"args\" : { \"color\" : \"red\" } }, { \"cmd\" : \"color\" , \"days\" : \"wkd\" , \"times\" : [ \"16:00\" ], \"args\" : { \"color\" : \"green\" } } ] Then we can send the command to the server: $ pyluxa4 scheduler --schedule myschedule.json {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} If we want to clear existing scheduling events while sending our new schedule, simply add the --clear command. $ pyluxa4 scheduler --schedule myschedule.json --clear {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} If desired, you can also just run --clear without a schedule remove all scheduled events. $ pyluxa4 scheduler --clear {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} To get an output of loaded events in the schedule (timers not included), we can run: $ pyluxa4 get schedule {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/schedule', 'schedule': [{'args': {'color': 'red'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['15:00']}, {'args': {'color': 'green'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['16:00']}], 'status': 'success'} Parameters Description cmd Name of the command to run days A list of days: mon , tue , wed , thu , fri , sat , or sun . You can also specify wkd for weekdays, wke for the weekend, and all for all days. times A list of times that the even will be run on. Times are specified as 24 hour time format. args Is a hash of key value pairs of arguments to pass the the specified command. Sending Schedule on Server Start You can also load a schedule while starting the server via the --schedule parameter: pyluxa4 serve --schedule myschedule.json [2019-09-22 14:05:10] INFO: Starting Luxafor server... Setting Timers \ue157 pyluxa4 allows for setting timers. Timers are essentially a special kind of scheduled event. One that ignores days and will destroy itself after the number of specified cycles has run to completion (unless it specified to run forever). Additionally, timers are unique as the times list does not contain specific times, but contains relative times in the form <number of hours>:<number of minutes> . For instance, if we wanted to have the timer go off in 3 hours and 30 minutes, we would specify the time as 3:30 . This does not represent 3:30 AM , but 3 hours and 30 minutes from the time the timer was added. For instance, if we wanted to strobe a red light in an hour and 30 minutes, we could use the following command: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 1:30 If we wanted to do it at ten minutes from now followed by another 5 minutes after that: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5 We could even repeat the cycle to flash to iterate through the timers twice, essentially flashing the red light at 10 minutes, 5 minutes, 10 minutes, and 5 minutes pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5 --cycle 2 We could even do it continuously every 30 minutes by specifying the cycle as 0 (meaning forever): pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 You can also delay when the times start by specifying a specific time to wait for before starting the timer. For instance, here we start flashing the light every 30 minutes starting at 9:00 AM: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00 You could also terminate a timer after at a specific time, for example 5:00 PM: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00 --end 17:00 As mentioned, times are just a special kind of scheduled event, you can actually put them in a schedule file and they will be recognized. You must add timer with the number of times to cycle through the timers. You also must make times relative. The key days will be ignored in timers and can be omitted. You can also use two one or both timer specific keys ( start and end ) to specify a respective start and end time for the timers. For a simple example of a timer represented in a schedule file, consider a case where we'd like to turn off lights as soon as a schedule is loaded. We could specify a timer with a relative time of 0:0 , which means right away: [ { \"cmd\" : \"off\" , \"timer\" : 1 , \"times\" : [ \"0:0\" ] } ] You can clear all running timers by calling the scheduler command with the --cancel parameter: $ pyluxa4 scheduler --cancel {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} To get an output of loaded timers, we can run: $ pyluxa4 get timers {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/timers', 'schedule': [{'args': {}, 'cmd': 'off', 'days': 'all', 'end': None, 'start': None, 'timer': 1, 'times': ['0:10']}], 'status': 'success'} Enabling HTTPS \ue157 pyluxa4 is mainly meant to be used on a local network, so these instructions are from that perspective. In order to enable HTTPS, we need to have a certificate. In our local network case, using a simple self signed certificate is more than sufficient. To create a certificate, we will assume you have OpenSSL installed. If you are on Windows using Git Bash, it will likely be available in your Bash terminal. We use OpenSSL to generate a x509v3 certificate. You can create a simple configuration template like the one shown below which adds in the v3 parameters. Replace the IP with the one from your machine. We will call this file cert.conf . [ req ] default_bits = 4096 distinguished_name = req_distinguished_name [ req_distinguished_name ] countryName = Country Name (2 letter code) stateOrProvinceName = State or Province Name (full name) localityName = Locality Name (eg, city) organizationName = Organization Name (eg, company) organizationalUnitName = Organizational Unit Name (eg, section) commonName = Common Name (e.g. server FQDN or YOUR name) emailAddress = Email Address [ v3_req ] subjectAltName = @alt_names [alt_names] DNS.1 = localhost IP.1 = 127.0.0.1 IP.2 = 192.168.1.2 Afterwards, run the following command. Enter the information that you'd like: openssl req -x509 -out pyluxa4.cer -newkey rsa:4096 -nodes -keyout private.key -extensions v3_req -days 3650 -config cert.conf You should now have a certificate pyluxa4.cer and a private key file private.key . Afterwards, you we can use the --ssl-cert and --ssl-key parameters to enable HTTPS in the server: pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key Now the server will only accept commands over HTTPS. $ pyluxa4 api {'status': 'fail', 'code': 0, 'error': 'Server does not appear to be running'} To send commands with over HTTPS to the server, simply use the --secure parameter. If you send the command with 0 , it will ignore verifying the certificate: $ pyluxa4 api --secure 0 c:\\Python36\\lib\\site-packages\\urllib3\\connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings InsecureRequestWarning) {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'} If you provide the certificate instead, it will verify the certificate: $ pyluxa4 api --secure pyluxa4.cer {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'} Token Authentication \ue157 In addition to using SSL for HTTPS, using token authentication can help make it more difficult for anyone to send commands to your Luxafor device. Tokens should really only be used with SSL. Simply specify your desired token using the the --token parameter when initiating the server: pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key --token secret Now the server will reject commands that require authentication if they are sent without the token. $ pyluxa4 color red --secure pyluxa4.cer {'status': 'fail', 'code': 401, 'error': 'Unauthorized Access'} But when we provide the token, the command passes: $ pyluxa4 color red --secure pyluxa4.cer --token secret {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'} Commands that Don't Require Authentication api is the one command that does not require authentication. It will accept commands with or without tokens.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#overview","text":"pyluxa4 is mainly designed to be used from command line. When installed, it provides a command line tool called pyluxa4 . When installing the module, a tool will be added called pyluxa4 . Assuming your Python installation's bin/Script folder is added to your system's path, you will be able to access it from the command line: $ pyluxa4 --version pyluxa4 1.5 You can also access it via: $ python3 -m pyluxa4 --version pyluxa4 1.5","title":"Overview"},{"location":"usage/#starting-the-server","text":"Generally, pyluxa4 is designed to be used by running a server, and then executing commands: Start the server: $ pyluxa4 serve [2019-09-21 15:21:49] INFO: Starting Luxafor server... Run a command: $ pyluxa4 api {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'} If you have multiple devices connected, and you want to specify a specific one, you can run the list command to see the connected devices. Devices are listed in the form index> path . $ pyluxa4 list 0> \\\\?\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030} Then we can then specify from the command line which device to use when we start the server. Using the index, it would be: pyluxa4 serve --device-index 0 Using the path, it would be: pyluxa4 serve --device-path \"\\\\?\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}\"","title":"Starting the Server"},{"location":"usage/#killing-a-server","text":"If the server is running in a console, you can always press Ctrl \uff0b C , but if your server is running in the background, you can kill the server with the kill command. $ pyluxa4 kill","title":"Killing a Server"},{"location":"usage/#sending-commands","text":"Once the server is up and running, you can send a variety of commands to set the LEDs to a specific color, to fade colors in or out, to strobe colors, to apply a wave effect to a color, or to simply run one of the built-in patterns. More advanced commands are also available. The scheduler command can send JSON content to the server with a list of commands to run at different times. The timer command can initiate a timer to initiate a command after a set amount of time. To run the commands, simply call pyluxa4 with the command, followed by the commands arguments: To set a color, simply specify the color command with the desired color: $ pyluxa4 color red {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'} There are a variety of commands, check out Commands to learn more.","title":"Sending Commands"},{"location":"usage/#scheduling-commands","text":"pyluxa4 provides a command scheduler that allows you to specify a number of commands to run at different times. For instance, if you wanted to automatically turn your light red at 3:00 PM for an hour, then turn it back green at 4:00 PM, we could construct a couple of scheduled events. Schedules are done as JSON files, the file should contain a list of events where each event is a hash of key value pairs that describes the event: [ { \"cmd\" : \"color\" , \"days\" : \"wkd\" , \"times\" : [ \"15:00\" ], \"args\" : { \"color\" : \"red\" } }, { \"cmd\" : \"color\" , \"days\" : \"wkd\" , \"times\" : [ \"16:00\" ], \"args\" : { \"color\" : \"green\" } } ] Then we can send the command to the server: $ pyluxa4 scheduler --schedule myschedule.json {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} If we want to clear existing scheduling events while sending our new schedule, simply add the --clear command. $ pyluxa4 scheduler --schedule myschedule.json --clear {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} If desired, you can also just run --clear without a schedule remove all scheduled events. $ pyluxa4 scheduler --clear {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} To get an output of loaded events in the schedule (timers not included), we can run: $ pyluxa4 get schedule {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/schedule', 'schedule': [{'args': {'color': 'red'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['15:00']}, {'args': {'color': 'green'}, 'cmd': 'color', 'days': ['wkd'], 'times': ['16:00']}], 'status': 'success'} Parameters Description cmd Name of the command to run days A list of days: mon , tue , wed , thu , fri , sat , or sun . You can also specify wkd for weekdays, wke for the weekend, and all for all days. times A list of times that the even will be run on. Times are specified as 24 hour time format. args Is a hash of key value pairs of arguments to pass the the specified command. Sending Schedule on Server Start You can also load a schedule while starting the server via the --schedule parameter: pyluxa4 serve --schedule myschedule.json [2019-09-22 14:05:10] INFO: Starting Luxafor server...","title":"Scheduling Commands"},{"location":"usage/#setting-timers","text":"pyluxa4 allows for setting timers. Timers are essentially a special kind of scheduled event. One that ignores days and will destroy itself after the number of specified cycles has run to completion (unless it specified to run forever). Additionally, timers are unique as the times list does not contain specific times, but contains relative times in the form <number of hours>:<number of minutes> . For instance, if we wanted to have the timer go off in 3 hours and 30 minutes, we would specify the time as 3:30 . This does not represent 3:30 AM , but 3 hours and 30 minutes from the time the timer was added. For instance, if we wanted to strobe a red light in an hour and 30 minutes, we could use the following command: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 1:30 If we wanted to do it at ten minutes from now followed by another 5 minutes after that: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5 We could even repeat the cycle to flash to iterate through the timers twice, essentially flashing the red light at 10 minutes, 5 minutes, 10 minutes, and 5 minutes pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:10,0:5 --cycle 2 We could even do it continuously every 30 minutes by specifying the cycle as 0 (meaning forever): pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 You can also delay when the times start by specifying a specific time to wait for before starting the timer. For instance, here we start flashing the light every 30 minutes starting at 9:00 AM: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00 You could also terminate a timer after at a specific time, for example 5:00 PM: pyluxa4 timer --cmd strobe --color red --speed 10 --repeat 10 --times 0:30 --cycle 0 --start 9:00 --end 17:00 As mentioned, times are just a special kind of scheduled event, you can actually put them in a schedule file and they will be recognized. You must add timer with the number of times to cycle through the timers. You also must make times relative. The key days will be ignored in timers and can be omitted. You can also use two one or both timer specific keys ( start and end ) to specify a respective start and end time for the timers. For a simple example of a timer represented in a schedule file, consider a case where we'd like to turn off lights as soon as a schedule is loaded. We could specify a timer with a relative time of 0:0 , which means right away: [ { \"cmd\" : \"off\" , \"timer\" : 1 , \"times\" : [ \"0:0\" ] } ] You can clear all running timers by calling the scheduler command with the --cancel parameter: $ pyluxa4 scheduler --cancel {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/scheduler', 'status': 'success'} To get an output of loaded timers, we can run: $ pyluxa4 get timers {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/scheduler/timers', 'schedule': [{'args': {}, 'cmd': 'off', 'days': 'all', 'end': None, 'start': None, 'timer': 1, 'times': ['0:10']}], 'status': 'success'}","title":"Setting Timers"},{"location":"usage/#enabling-https","text":"pyluxa4 is mainly meant to be used on a local network, so these instructions are from that perspective. In order to enable HTTPS, we need to have a certificate. In our local network case, using a simple self signed certificate is more than sufficient. To create a certificate, we will assume you have OpenSSL installed. If you are on Windows using Git Bash, it will likely be available in your Bash terminal. We use OpenSSL to generate a x509v3 certificate. You can create a simple configuration template like the one shown below which adds in the v3 parameters. Replace the IP with the one from your machine. We will call this file cert.conf . [ req ] default_bits = 4096 distinguished_name = req_distinguished_name [ req_distinguished_name ] countryName = Country Name (2 letter code) stateOrProvinceName = State or Province Name (full name) localityName = Locality Name (eg, city) organizationName = Organization Name (eg, company) organizationalUnitName = Organizational Unit Name (eg, section) commonName = Common Name (e.g. server FQDN or YOUR name) emailAddress = Email Address [ v3_req ] subjectAltName = @alt_names [alt_names] DNS.1 = localhost IP.1 = 127.0.0.1 IP.2 = 192.168.1.2 Afterwards, run the following command. Enter the information that you'd like: openssl req -x509 -out pyluxa4.cer -newkey rsa:4096 -nodes -keyout private.key -extensions v3_req -days 3650 -config cert.conf You should now have a certificate pyluxa4.cer and a private key file private.key . Afterwards, you we can use the --ssl-cert and --ssl-key parameters to enable HTTPS in the server: pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key Now the server will only accept commands over HTTPS. $ pyluxa4 api {'status': 'fail', 'code': 0, 'error': 'Server does not appear to be running'} To send commands with over HTTPS to the server, simply use the --secure parameter. If you send the command with 0 , it will ignore verifying the certificate: $ pyluxa4 api --secure 0 c:\\Python36\\lib\\site-packages\\urllib3\\connectionpool.py:851: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings InsecureRequestWarning) {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'} If you provide the certificate instead, it will verify the certificate: $ pyluxa4 api --secure pyluxa4.cer {'error': '', 'path': '/pyluxa4/api/version', 'status': 'success', 'version': '1.5.1', 'version_path': '/pyluxa4/api/v1.5'}","title":"Enabling HTTPS"},{"location":"usage/#token-authentication","text":"In addition to using SSL for HTTPS, using token authentication can help make it more difficult for anyone to send commands to your Luxafor device. Tokens should really only be used with SSL. Simply specify your desired token using the the --token parameter when initiating the server: pyluxa4 serve --ssl-cert pyluxa4.cer --ssl-key private.key --token secret Now the server will reject commands that require authentication if they are sent without the token. $ pyluxa4 color red --secure pyluxa4.cer {'status': 'fail', 'code': 401, 'error': 'Unauthorized Access'} But when we provide the token, the command passes: $ pyluxa4 color red --secure pyluxa4.cer --token secret {'code': 200, 'error': '', 'path': '/pyluxa4/api/v1.5/command/color', 'status': 'success'} Commands that Don't Require Authentication api is the one command that does not require authentication. It will accept commands with or without tokens.","title":"Token Authentication"},{"location":"usb/","text":"USB API \ue157 Overview \ue157 While pyluxa4 provides a CLI interface for starting a server and commands that control a Luxafor device, you can also use pyluxa4 to control the device directly through the USB without the server directly using. If you wish to control the device directly from your own Python scripts, simply import the usb library: from pyluxa4 import usb Then you can connect to a Luxafor device: with usb . Luxafor ( index = 0 ) as luxafor : luxafor . fade ( \"red\" , speed = 10 , wait = True ) luxafor . fade ( \"green\" , speed = 10 , wait = True ) You can also use it without with : device = usb . Luxafor ( index = 0 ) luxafor . fade ( \"red\" , speed = 10 , wait = True ) luxafor . fade ( \"green\" , speed = 10 , wait = True ) device . close () Constants \ue157 LEDs \ue157 Constant Alias Value LED_ALL 0xff LED_FRONT 0x41 LED_BACK 0x42 LED_1 1 LED_2 2 LED_3 3 LED_4 4 LED_5 5 LED_6 6 Waves \ue157 Constant Alias Value WAVE_1 WAVE_SHORT 1 WAVE_2 WAVE_LONG 2 WAVE_3 WAVE_OVERLAPPING_SHORT 3 WAVE_4 WAVE_OVERLAPPING_LONG 4 WAVE_5 5 Patterns \ue157 Constant Alias Value PATTERN_1 PATTERN_TRAFFIC_LIGHT 1 PATTERN_2 PATTERN_RANDOM1 2 PATTERN_3 PATTERN_RANDOM2 3 PATTERN_4 PATTERN_RANDOM3 4 PATTERN_5 PATTERN_POLICE 5 PATTERN_6 PATTERN_RANDOM4 6 PATTERN_7 PATTERN_RANDOM5 7 PATTERN_8 PATTERN_RAINBOW 8 enumerate_luxafor() \ue157 Enumerate Luxafor devices returning a list of the available devices: >>> import pyluxa4.usb as usb >>> usb . enumerate_luxafor () [{'path': b'\\\\\\\\?\\\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}', 'vendor_id': 1240, 'product_id': 62322, 'serial_number': None, 'release_number': 256, 'manufacturer_string': 'Microchip Technology Inc.', 'product_string': 'LUXAFOR FLAG', 'usage_page': 65280, 'usage': 1, 'interface_number': -1}] Luxafor() \ue157 class Luxafor : \"\"\"Class to control Luxafor device.\"\"\" def __init__ ( self , index = 0 , path = None ): Luxafor is the class that connects to the Luxafor USB device. Parameters Description index Index of the HID USB device as returned by enumerate_luxafor() . path The path of the HID USB device as returned by enumerate_luxafor() . Luxafor.close() \ue157 def close ( self ): \"\"\"Close Luxafor device.\"\"\" Close the connection to the Luxafor device. Luxafor.off() \ue157 def off ( self ): \"\"\"Set all LEDs to off.\"\"\" Sets all the LEDs of the Luxafor device off. Luxafor.basic_color() \ue157 def basic_color ( self , color ): \"\"\" Build basic color command. ``` Byte 0: Report number (Luxafor flag only has 0) Byte 1: Color: R, G, B, C, M, Y, W, O Byte 2: NA Byte 3: NA Byte 4: NA Byte 5: NA Byte 6: NA Byte 7: NA Byte 8: NA ``` \"\"\" Using the built-in color codes, set all the LEDs to the color. Parameters Description color A string with either the values R (red), G (green), B (blue), C (cyan), M (magenta), Y (yellow), or O (off). Luxafor.color() \ue157 def color ( self , color , * , led = LED_ALL ): \"\"\" Build static color command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 1 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: NA Byte 7: NA Byte 8: NA ``` \"\"\" Set LEDs to the specified colors. Each LED can be controlled individually. If a built-in color code is used, the command will revert to basic_color functionality, which means led specifics will be ignored and all LED will be set. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants . Luxafor.fade() \ue157 def fade ( self , color , * , led = LED_ALL , speed = 1 , wait = False ): \"\"\" Build fade command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 2 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: Fade speed: 0-255 Byte 7: NA Byte 8: NA ``` \"\"\" Fade a color in (or out if the color is off or black ). Each LED can be controlled individually via led . The duration/speed of the fade can also be controlled. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants . speed Speed at which the color will be faded (0-255). Lower is generally faster. repeat How many times to repeat the fade effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0. Luxafor.strobe() \ue157 def strobe ( self , color , * , led = LED_ALL , speed = 0 , repeat = 0 , wait = False ): \"\"\" Build strobe command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 3 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: Speed: 0-255 Byte 7: NA Byte 8: Repeat: 0-255 ``` \"\"\" Strobe the LEDs with the specified color. Each LED can be controlled individually via led . You can also control the speed and how many times the strobe repeats. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants . speed Speed at which the color will strobe (0-255). Lower is generally faster. repeat How many times to repeat the strobe effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0. Luxafor.wave() \ue157 def wave ( self , color , * , wave = WAVE_SHORT , speed = 0 , repeat = 0 , wait = False ): \"\"\" Build wave command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 4 Byte 2: Wave type: 1-5 Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: NA Byte 7: Repeat: 0-255 Byte 8: Speed: 0-255 ``` \"\"\" Apply a wave effect using the specified color across the LEDs. You can control the speed and how many times the wave is repeated. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. wave Specify the desired wave pattern. See the wave constants . speed Speed at which the color will apply the wave effect (0-255). Lower is generally faster. repeat How many times to repeat the wave effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0. Luxafor.pattern() \ue157 def pattern ( self , pattern , * , repeat = 0 , wait = False ): \"\"\" Build pattern command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 6 Byte 2: Pattern ID: 0-8 Byte 3: Repeat: 0-255 ``` \"\"\" Initiate one of the built-in patterns in the Luxafor device. You can also control how man times the pattern repeats. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description pattern Pattern code (1-8). See the pattern constants . repeat How many times to repeat the pattern (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0.","title":"USB API"},{"location":"usb/#usb-api","text":"","title":"USB API"},{"location":"usb/#overview","text":"While pyluxa4 provides a CLI interface for starting a server and commands that control a Luxafor device, you can also use pyluxa4 to control the device directly through the USB without the server directly using. If you wish to control the device directly from your own Python scripts, simply import the usb library: from pyluxa4 import usb Then you can connect to a Luxafor device: with usb . Luxafor ( index = 0 ) as luxafor : luxafor . fade ( \"red\" , speed = 10 , wait = True ) luxafor . fade ( \"green\" , speed = 10 , wait = True ) You can also use it without with : device = usb . Luxafor ( index = 0 ) luxafor . fade ( \"red\" , speed = 10 , wait = True ) luxafor . fade ( \"green\" , speed = 10 , wait = True ) device . close ()","title":"Overview"},{"location":"usb/#constants","text":"","title":"Constants"},{"location":"usb/#leds","text":"Constant Alias Value LED_ALL 0xff LED_FRONT 0x41 LED_BACK 0x42 LED_1 1 LED_2 2 LED_3 3 LED_4 4 LED_5 5 LED_6 6","title":"LEDs"},{"location":"usb/#waves","text":"Constant Alias Value WAVE_1 WAVE_SHORT 1 WAVE_2 WAVE_LONG 2 WAVE_3 WAVE_OVERLAPPING_SHORT 3 WAVE_4 WAVE_OVERLAPPING_LONG 4 WAVE_5 5","title":"Waves"},{"location":"usb/#patterns","text":"Constant Alias Value PATTERN_1 PATTERN_TRAFFIC_LIGHT 1 PATTERN_2 PATTERN_RANDOM1 2 PATTERN_3 PATTERN_RANDOM2 3 PATTERN_4 PATTERN_RANDOM3 4 PATTERN_5 PATTERN_POLICE 5 PATTERN_6 PATTERN_RANDOM4 6 PATTERN_7 PATTERN_RANDOM5 7 PATTERN_8 PATTERN_RAINBOW 8","title":"Patterns"},{"location":"usb/#enumerate_luxafor","text":"Enumerate Luxafor devices returning a list of the available devices: >>> import pyluxa4.usb as usb >>> usb . enumerate_luxafor () [{'path': b'\\\\\\\\?\\\\hid#vid_04d8&pid_f372#6&38a95344&1&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}', 'vendor_id': 1240, 'product_id': 62322, 'serial_number': None, 'release_number': 256, 'manufacturer_string': 'Microchip Technology Inc.', 'product_string': 'LUXAFOR FLAG', 'usage_page': 65280, 'usage': 1, 'interface_number': -1}]","title":"enumerate_luxafor()"},{"location":"usb/#luxafor","text":"class Luxafor : \"\"\"Class to control Luxafor device.\"\"\" def __init__ ( self , index = 0 , path = None ): Luxafor is the class that connects to the Luxafor USB device. Parameters Description index Index of the HID USB device as returned by enumerate_luxafor() . path The path of the HID USB device as returned by enumerate_luxafor() .","title":"Luxafor()"},{"location":"usb/#luxaforclose","text":"def close ( self ): \"\"\"Close Luxafor device.\"\"\" Close the connection to the Luxafor device.","title":"Luxafor.close()"},{"location":"usb/#luxaforoff","text":"def off ( self ): \"\"\"Set all LEDs to off.\"\"\" Sets all the LEDs of the Luxafor device off.","title":"Luxafor.off()"},{"location":"usb/#luxaforbasic_color","text":"def basic_color ( self , color ): \"\"\" Build basic color command. ``` Byte 0: Report number (Luxafor flag only has 0) Byte 1: Color: R, G, B, C, M, Y, W, O Byte 2: NA Byte 3: NA Byte 4: NA Byte 5: NA Byte 6: NA Byte 7: NA Byte 8: NA ``` \"\"\" Using the built-in color codes, set all the LEDs to the color. Parameters Description color A string with either the values R (red), G (green), B (blue), C (cyan), M (magenta), Y (yellow), or O (off).","title":"Luxafor.basic_color()"},{"location":"usb/#luxaforcolor","text":"def color ( self , color , * , led = LED_ALL ): \"\"\" Build static color command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 1 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: NA Byte 7: NA Byte 8: NA ``` \"\"\" Set LEDs to the specified colors. Each LED can be controlled individually. If a built-in color code is used, the command will revert to basic_color functionality, which means led specifics will be ignored and all LED will be set. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants .","title":"Luxafor.color()"},{"location":"usb/#luxaforfade","text":"def fade ( self , color , * , led = LED_ALL , speed = 1 , wait = False ): \"\"\" Build fade command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 2 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: Fade speed: 0-255 Byte 7: NA Byte 8: NA ``` \"\"\" Fade a color in (or out if the color is off or black ). Each LED can be controlled individually via led . The duration/speed of the fade can also be controlled. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants . speed Speed at which the color will be faded (0-255). Lower is generally faster. repeat How many times to repeat the fade effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0.","title":"Luxafor.fade()"},{"location":"usb/#luxaforstrobe","text":"def strobe ( self , color , * , led = LED_ALL , speed = 0 , repeat = 0 , wait = False ): \"\"\" Build strobe command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 3 Byte 2: LED: 1-6, 0x42 (back), 0x41 (front), 0xFF (all) Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: Speed: 0-255 Byte 7: NA Byte 8: Repeat: 0-255 ``` \"\"\" Strobe the LEDs with the specified color. Each LED can be controlled individually via led . You can also control the speed and how many times the strobe repeats. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. led Specific LEDs can be specified to control (1-6). You can also set all the front LEDs with 0x41 , all the back LEDs with 0x42 , or all the LEDs with 0xff . See LED constants . speed Speed at which the color will strobe (0-255). Lower is generally faster. repeat How many times to repeat the strobe effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0.","title":"Luxafor.strobe()"},{"location":"usb/#luxaforwave","text":"def wave ( self , color , * , wave = WAVE_SHORT , speed = 0 , repeat = 0 , wait = False ): \"\"\" Build wave command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 4 Byte 2: Wave type: 1-5 Byte 3: Red channel: 0-255 Byte 4: Green channel: 0-255 Byte 5: Blue channel: 0-255 Byte 6: NA Byte 7: Repeat: 0-255 Byte 8: Speed: 0-255 ``` \"\"\" Apply a wave effect using the specified color across the LEDs. You can control the speed and how many times the wave is repeated. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description color Color is specified by a string with hex RGB color codes in the form of #RRGGBB or #RGB . You can also use any CSS webcolor name, such as red , green , etc. off is treated like black which turns all LEDs off. wave Specify the desired wave pattern. See the wave constants . speed Speed at which the color will apply the wave effect (0-255). Lower is generally faster. repeat How many times to repeat the wave effect (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0.","title":"Luxafor.wave()"},{"location":"usb/#luxaforpattern","text":"def pattern ( self , pattern , * , repeat = 0 , wait = False ): \"\"\" Build pattern command. ``` Byte 0: Report number: 0 (Luxafor flag only has 0) Byte 1: Command Mode: 6 Byte 2: Pattern ID: 0-8 Byte 3: Repeat: 0-255 ``` \"\"\" Initiate one of the built-in patterns in the Luxafor device. You can also control how man times the pattern repeats. If desired, you can wait for the command to complete as well. Commands that employ repeat=0 will continue forever, so wait will not be considered for infinite loops. Parameters Description pattern Pattern code (1-8). See the pattern constants . repeat How many times to repeat the pattern (0-255). 0 will cause the effect to repeat forever. wait Wait for the command to complete. Wait will be ignored if repeat is 0.","title":"Luxafor.pattern()"},{"location":"about/changelog/","text":"Changelog \ue157 1.6.0 \ue157 NEW : Deprecate the timer argument --type in favor of --cmd which corresponds to how it is stored in the scheduler. 1.5.1 \ue157 FIX : Better scheduler algorithm. Handles lapse in time (computer sleeping), more efficient, etc. 1.5.0 \ue157 NEW : Add timer command. NEW : Add --cancel option to scheduler command that cancels timers in the scheduler. --clear will not remove timers, only traditional scheduled events. FIX : Better day rollover logic. FIX : LED resolution from CLI. 1.4.0 \ue157 NEW : Schedule should not be sent as a file name, but as a JSON object. 1.3.0 \ue157 NEW : API for USB library now returns whether it passed or failed. This can indicate a disconnected device. FIX : A command may fail for various reasons, so don't remove a command from schedule just because it fails. FIX : Add logic to reconnect to a device if it appears the device was disconnected. 1.2.0 \ue157 NEW : --wait removed from CLI as the server should not get hung while waiting. wait is still available when using pyluxa4.usb directly. NEW : Add new scheduler command that allows scheduling command events based on day and time and clearing scheduled events. NEW : Add new get command which can be used to retrieve currently loaded schedules via pyluxa4 get schedule . 1.1.0 \ue157 NEW : Allow traffic-light , police , rainbow , and random<1 - 5> as valid values on CLI along with numerical values. NEW : Allow short , long , overlapping-short , and overlapping-long as valid values on CLI along with numerical values. NEW : Provide more constants with friendly names in common library. FIX : Wave pattern not being sent properly. 1.0.0 \ue157 NEW : Initial release","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#160","text":"NEW : Deprecate the timer argument --type in favor of --cmd which corresponds to how it is stored in the scheduler.","title":"1.6.0"},{"location":"about/changelog/#151","text":"FIX : Better scheduler algorithm. Handles lapse in time (computer sleeping), more efficient, etc.","title":"1.5.1"},{"location":"about/changelog/#150","text":"NEW : Add timer command. NEW : Add --cancel option to scheduler command that cancels timers in the scheduler. --clear will not remove timers, only traditional scheduled events. FIX : Better day rollover logic. FIX : LED resolution from CLI.","title":"1.5.0"},{"location":"about/changelog/#140","text":"NEW : Schedule should not be sent as a file name, but as a JSON object.","title":"1.4.0"},{"location":"about/changelog/#130","text":"NEW : API for USB library now returns whether it passed or failed. This can indicate a disconnected device. FIX : A command may fail for various reasons, so don't remove a command from schedule just because it fails. FIX : Add logic to reconnect to a device if it appears the device was disconnected.","title":"1.3.0"},{"location":"about/changelog/#120","text":"NEW : --wait removed from CLI as the server should not get hung while waiting. wait is still available when using pyluxa4.usb directly. NEW : Add new scheduler command that allows scheduling command events based on day and time and clearing scheduled events. NEW : Add new get command which can be used to retrieve currently loaded schedules via pyluxa4 get schedule .","title":"1.2.0"},{"location":"about/changelog/#110","text":"NEW : Allow traffic-light , police , rainbow , and random<1 - 5> as valid values on CLI along with numerical values. NEW : Allow short , long , overlapping-short , and overlapping-long as valid values on CLI along with numerical values. NEW : Provide more constants with friendly names in common library. FIX : Wave pattern not being sent properly.","title":"1.1.0"},{"location":"about/changelog/#100","text":"NEW : Initial release","title":"1.0.0"},{"location":"about/contributing/","text":"Contributing & Support \ue157 Bug Reports \ue157 Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much information as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues \ue157 Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others. Pull Requests \ue157 Pull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out Development for more information on the environment and processes. Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool by helping to improve the documentation. Check out Development for more info on documentation.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much information as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out Development for more information on the environment and processes.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool by helping to improve the documentation. Check out Development for more info on documentation.","title":"Documentation Improvements"},{"location":"about/development/","text":"Development \ue157 Coding Standards \ue157 When writing code, the code should roughly conform to PEP8 and PEP257 suggestions. The project utilizes the Flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules). When in doubt, follow the formatting hints of existing code when adding files or modifying existing files. Listed below are the modules used: pycqa/flake8 pycqa/flake8-docstrings pycqa/pep8-naming ebeweber/flake8-mutable gforcada/flake8-builtins Usually this can be automated with Tox (assuming it is installed): tox -e lint . Building and Editing Documents \ue157 Documents are in Markdown (with with some additional syntax provided by extensions) and are converted to HTML via Python Markdown. If you would like to build and preview the documentation, you must have these packages installed: Python-Markdown/markdown : the Markdown parser. mkdocs/mkdocs : the document site generator. squidfunk/mkdocs-material : a material theme for MkDocs. facelessuser/pymdown-extensions : this Python Markdown extension bundle. In order to build and preview the documents, just run the command below from the root of the project and you should be able to view the documents at localhost:8000 in your browser. After that, you should be able to update the documents and have your browser preview update live. mkdocs serve Spell Checking Documents \ue157 Spell checking is performed via facelessuser/pyspelling . During validation we build the docs and spell check various files in the project. Aspell must be installed and in the path. Currently this project uses one of the more recent versions of Aspell. It is not expected that everyone will install and run Aspell locally, but it will be run in CI tests for pull requests. In order to perform the spell check locally, it is expected you are setup to build the documents, and that you have Aspell installed in your system path (if needed you can use the --binary option to point to the location of your Aspell binary). It is also expected that you have the en dictionary installed as well. To initiate the spell check, run the following command from the root of the project. You will need to make sure the documents are built first: mkdocs build --clean And then run the spell checker. pyspelling It should print out the files with the misspelled words if any are found. If you find it prints words that are not misspelled, you can add them in docs/src/dictionary/en-custom.text . Running Validation With Tox \ue157 Tox ( tox-dev/tox ) is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus Aspell). You could also setup your own virtual environments with the Virtualenv module without Tox, and manually do the same. First, you need to have Tox installed: pip install tox By running Tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests. See tox.ini to learn more. tox To target linting: tox -e lint To select spell checking and document building: tox -e documents","title":"Development"},{"location":"about/development/#development","text":"","title":"Development"},{"location":"about/development/#coding-standards","text":"When writing code, the code should roughly conform to PEP8 and PEP257 suggestions. The project utilizes the Flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules). When in doubt, follow the formatting hints of existing code when adding files or modifying existing files. Listed below are the modules used: pycqa/flake8 pycqa/flake8-docstrings pycqa/pep8-naming ebeweber/flake8-mutable gforcada/flake8-builtins Usually this can be automated with Tox (assuming it is installed): tox -e lint .","title":"Coding Standards"},{"location":"about/development/#building-and-editing-documents","text":"Documents are in Markdown (with with some additional syntax provided by extensions) and are converted to HTML via Python Markdown. If you would like to build and preview the documentation, you must have these packages installed: Python-Markdown/markdown : the Markdown parser. mkdocs/mkdocs : the document site generator. squidfunk/mkdocs-material : a material theme for MkDocs. facelessuser/pymdown-extensions : this Python Markdown extension bundle. In order to build and preview the documents, just run the command below from the root of the project and you should be able to view the documents at localhost:8000 in your browser. After that, you should be able to update the documents and have your browser preview update live. mkdocs serve","title":"Building and Editing Documents"},{"location":"about/development/#spell-checking-documents","text":"Spell checking is performed via facelessuser/pyspelling . During validation we build the docs and spell check various files in the project. Aspell must be installed and in the path. Currently this project uses one of the more recent versions of Aspell. It is not expected that everyone will install and run Aspell locally, but it will be run in CI tests for pull requests. In order to perform the spell check locally, it is expected you are setup to build the documents, and that you have Aspell installed in your system path (if needed you can use the --binary option to point to the location of your Aspell binary). It is also expected that you have the en dictionary installed as well. To initiate the spell check, run the following command from the root of the project. You will need to make sure the documents are built first: mkdocs build --clean And then run the spell checker. pyspelling It should print out the files with the misspelled words if any are found. If you find it prints words that are not misspelled, you can add them in docs/src/dictionary/en-custom.text .","title":"Spell Checking Documents"},{"location":"about/development/#running-validation-with-tox","text":"Tox ( tox-dev/tox ) is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus Aspell). You could also setup your own virtual environments with the Virtualenv module without Tox, and manually do the same. First, you need to have Tox installed: pip install tox By running Tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests. See tox.ini to learn more. tox To target linting: tox -e lint To select spell checking and document building: tox -e documents","title":"Running Validation With Tox"},{"location":"about/license/","text":"License \ue157 MIT License Copyright \u00a9 2019 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2019 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}